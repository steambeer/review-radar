/**
 * Farcaster Hub API
 * Perform basic queries of Farcaster state via the REST API of a Farcaster hub. See the [Neynar docs](https://docs.neynar.com/reference) for more details.
 *
 * The version of the OpenAPI document: 2.35.0
 * Contact: team@neynar.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import { type RequestArgs, BaseAPI } from '../base';
import type { UserNameProof } from '../models';
import type { UsernameProofsResponse } from '../models';
/**
 * UsernamesApi - axios parameter creator
 * @export
 */
export declare const UsernamesApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * Fetch a proof for a username.
     * @summary Proof for a username
     * @param {string} name The Farcaster username or ENS address
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @returns {Promise<UserNameProof>} A promise that resolves to a `UserNameProof` object
     *
     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-username-proof-by-name)
     *
     */
    fetchUsernameProofByName: (name: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Fetch proofs provided by a user.
     * @summary Proofs provided by an FID
     * @param {number} fid The FID being requested
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @returns {Promise<UsernameProofsResponse>} A promise that resolves to a `UsernameProofsResponse` object
     *
     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-username-proofs-by-fid)
     *
     */
    fetchUsernameProofsByFid: (fid: number, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * UsernamesApi - functional programming interface
 * @export
 */
export declare const UsernamesApiFp: (configuration?: Configuration) => {
    /**
     * Fetch a proof for a username.
     * @summary Proof for a username
     * @param {string} name The Farcaster username or ENS address
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @returns {Promise<UserNameProof>} A promise that resolves to a `UserNameProof` object
     *
     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-username-proof-by-name)
     *
     */
    fetchUsernameProofByName(name: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserNameProof>>;
    /**
     * Fetch proofs provided by a user.
     * @summary Proofs provided by an FID
     * @param {number} fid The FID being requested
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @returns {Promise<UsernameProofsResponse>} A promise that resolves to a `UsernameProofsResponse` object
     *
     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-username-proofs-by-fid)
     *
     */
    fetchUsernameProofsByFid(fid: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UsernameProofsResponse>>;
};
/**
 * UsernamesApi - factory interface
 * @export
 */
export declare const UsernamesApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * Fetch a proof for a username.
     * @summary Proof for a username
     * @param {UsernamesApiFetchUsernameProofByNameRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @returns {Promise<UserNameProof>} A promise that resolves to a `UserNameProof` object
     *
     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-username-proof-by-name)
     *
     */
    fetchUsernameProofByName(requestParameters: UsernamesApiFetchUsernameProofByNameRequest, options?: RawAxiosRequestConfig): AxiosPromise<UserNameProof>;
    /**
     * Fetch proofs provided by a user.
     * @summary Proofs provided by an FID
     * @param {UsernamesApiFetchUsernameProofsByFidRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @returns {Promise<UsernameProofsResponse>} A promise that resolves to a `UsernameProofsResponse` object
     *
     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-username-proofs-by-fid)
     *
     */
    fetchUsernameProofsByFid(requestParameters: UsernamesApiFetchUsernameProofsByFidRequest, options?: RawAxiosRequestConfig): AxiosPromise<UsernameProofsResponse>;
};
/**
 * UsernamesApi - interface
 * @export
 * @interface UsernamesApi
 */
export interface UsernamesApiInterface {
    /**
     * Fetch a proof for a username.
     * @summary Proof for a username
     * @param {UsernamesApiFetchUsernameProofByNameRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsernamesApiInterface
     * @returns {Promise<UserNameProof>} A promise that resolves to a `UserNameProof` object
     *
     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-username-proof-by-name)
     *
     */
    fetchUsernameProofByName(requestParameters: UsernamesApiFetchUsernameProofByNameRequest, options?: RawAxiosRequestConfig): AxiosPromise<UserNameProof>;
    /**
     * Fetch proofs provided by a user.
     * @summary Proofs provided by an FID
     * @param {UsernamesApiFetchUsernameProofsByFidRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsernamesApiInterface
     * @returns {Promise<UsernameProofsResponse>} A promise that resolves to a `UsernameProofsResponse` object
     *
     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-username-proofs-by-fid)
     *
     */
    fetchUsernameProofsByFid(requestParameters: UsernamesApiFetchUsernameProofsByFidRequest, options?: RawAxiosRequestConfig): AxiosPromise<UsernameProofsResponse>;
}
/**
 * Request parameters for fetchUsernameProofByName operation in UsernamesApi.
 * @export
 * @interface UsernamesApiFetchUsernameProofByNameRequest
 */
export interface UsernamesApiFetchUsernameProofByNameRequest {
    /**
     * The Farcaster username or ENS address
     *
     *
     *
     * @type {string}
     * @memberof UsernamesApiFetchUsernameProofByName
     */
    readonly name: string;
}
/**
 * Request parameters for fetchUsernameProofsByFid operation in UsernamesApi.
 * @export
 * @interface UsernamesApiFetchUsernameProofsByFidRequest
 */
export interface UsernamesApiFetchUsernameProofsByFidRequest {
    /**
     * The FID being requested
     *
     *
     *
     * @type {number}
     * @memberof UsernamesApiFetchUsernameProofsByFid
     */
    readonly fid: number;
}
/**
 * UsernamesApi - object-oriented interface
 * @export
 * @class UsernamesApi
 * @extends {BaseAPI}
 */
export declare class UsernamesApi extends BaseAPI implements UsernamesApiInterface {
    /**
     * Fetch a proof for a username.
     * @summary Proof for a username
     * @param {UsernamesApiFetchUsernameProofByNameRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsernamesApi
     * @returns {Promise<UserNameProof>} A promise that resolves to a `UserNameProof` object
     *
     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-username-proof-by-name)
     *
     */
    fetchUsernameProofByName(requestParameters: UsernamesApiFetchUsernameProofByNameRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<UserNameProof, any>>;
    /**
     * Fetch proofs provided by a user.
     * @summary Proofs provided by an FID
     * @param {UsernamesApiFetchUsernameProofsByFidRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsernamesApi
     * @returns {Promise<UsernameProofsResponse>} A promise that resolves to a `UsernameProofsResponse` object
     *
     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-username-proofs-by-fid)
     *
     */
    fetchUsernameProofsByFid(requestParameters: UsernamesApiFetchUsernameProofsByFidRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<UsernameProofsResponse, any>>;
}
