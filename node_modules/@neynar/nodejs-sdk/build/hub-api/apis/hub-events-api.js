"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * Farcaster Hub API
 * Perform basic queries of Farcaster state via the REST API of a Farcaster hub. See the [Neynar docs](https://docs.neynar.com/reference) for more details.
 *
 * The version of the OpenAPI document: 2.35.0
 * Contact: team@neynar.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.HubEventsApi = exports.HubEventsApiFactory = exports.HubEventsApiFp = exports.HubEventsApiAxiosParamCreator = void 0;
const axios_1 = __importDefault(require("axios"));
// Some imports not used depending on template conditions
// @ts-ignore
const common_1 = require("../common");
// @ts-ignore
const base_1 = require("../base");
/**
 * HubEventsApi - axios parameter creator
 * @export
 */
const HubEventsApiAxiosParamCreator = function (configuration) {
    return {
        /**
         * Fetch a list of events.
         * @summary Page of events
         * @param {number} [fromEventId] An optional Hub Id to start getting events from. This is also returned from the API as nextPageEventId, which can be used to page through all the Hub events. Set it to 0 to start from the first event.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         * @returns {Promise<FetchEvents200Response>} A promise that resolves to a `FetchEvents200Response` object
         *
         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-events)
         *
         */
        fetchEvents: async (fromEventId, options = {}) => {
            const localVarPath = `/v1/events`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication ApiKeyAuth required
            await (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "x-api-key", configuration);
            if (fromEventId !== undefined) {
                localVarQueryParameter['from_event_id'] = fromEventId;
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Lookup an event by its ID.
         * @summary Event by ID
         * @param {number} eventId The Hub Id of the event
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         * @returns {Promise<HubEvent>} A promise that resolves to a `HubEvent` object
         *
         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/lookup-event)
         *
         */
        lookupEvent: async (eventId, options = {}) => {
            // verify required parameter 'eventId' is not null or undefined
            (0, common_1.assertParamExists)('lookupEvent', 'eventId', eventId);
            const localVarPath = `/v1/eventById`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication ApiKeyAuth required
            await (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "x-api-key", configuration);
            if (eventId !== undefined) {
                localVarQueryParameter['event_id'] = eventId;
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};
exports.HubEventsApiAxiosParamCreator = HubEventsApiAxiosParamCreator;
/**
 * HubEventsApi - functional programming interface
 * @export
 */
const HubEventsApiFp = function (configuration) {
    const localVarAxiosParamCreator = (0, exports.HubEventsApiAxiosParamCreator)(configuration);
    return {
        /**
         * Fetch a list of events.
         * @summary Page of events
         * @param {number} [fromEventId] An optional Hub Id to start getting events from. This is also returned from the API as nextPageEventId, which can be used to page through all the Hub events. Set it to 0 to start from the first event.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         * @returns {Promise<FetchEvents200Response>} A promise that resolves to a `FetchEvents200Response` object
         *
         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-events)
         *
         */
        async fetchEvents(fromEventId, options) {
            var _a, _b, _c;
            const localVarAxiosArgs = await localVarAxiosParamCreator.fetchEvents(fromEventId, options);
            const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
            const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['HubEventsApi.fetchEvents']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Lookup an event by its ID.
         * @summary Event by ID
         * @param {number} eventId The Hub Id of the event
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         * @returns {Promise<HubEvent>} A promise that resolves to a `HubEvent` object
         *
         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/lookup-event)
         *
         */
        async lookupEvent(eventId, options) {
            var _a, _b, _c;
            const localVarAxiosArgs = await localVarAxiosParamCreator.lookupEvent(eventId, options);
            const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
            const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['HubEventsApi.lookupEvent']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    };
};
exports.HubEventsApiFp = HubEventsApiFp;
/**
 * HubEventsApi - factory interface
 * @export
 */
const HubEventsApiFactory = function (configuration, basePath, axios) {
    const localVarFp = (0, exports.HubEventsApiFp)(configuration);
    return {
        /**
         * Fetch a list of events.
         * @summary Page of events
         * @param {HubEventsApiFetchEventsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         * @returns {Promise<FetchEvents200Response>} A promise that resolves to a `FetchEvents200Response` object
         *
         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-events)
         *
         */
        fetchEvents(requestParameters = {}, options) {
            return localVarFp.fetchEvents(requestParameters.fromEventId, options).then((request) => request(axios, basePath));
        },
        /**
         * Lookup an event by its ID.
         * @summary Event by ID
         * @param {HubEventsApiLookupEventRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         * @returns {Promise<HubEvent>} A promise that resolves to a `HubEvent` object
         *
         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/lookup-event)
         *
         */
        lookupEvent(requestParameters, options) {
            return localVarFp.lookupEvent(requestParameters.eventId, options).then((request) => request(axios, basePath));
        },
    };
};
exports.HubEventsApiFactory = HubEventsApiFactory;
/**
 * HubEventsApi - object-oriented interface
 * @export
 * @class HubEventsApi
 * @extends {BaseAPI}
 */
class HubEventsApi extends base_1.BaseAPI {
    /**
     * Fetch a list of events.
     * @summary Page of events
     * @param {HubEventsApiFetchEventsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HubEventsApi
     * @returns {Promise<FetchEvents200Response>} A promise that resolves to a `FetchEvents200Response` object
     *
     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-events)
     *
     */
    fetchEvents(requestParameters = {}, options) {
        return (0, exports.HubEventsApiFp)(this.configuration).fetchEvents(requestParameters.fromEventId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Lookup an event by its ID.
     * @summary Event by ID
     * @param {HubEventsApiLookupEventRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HubEventsApi
     * @returns {Promise<HubEvent>} A promise that resolves to a `HubEvent` object
     *
     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/lookup-event)
     *
     */
    lookupEvent(requestParameters, options) {
        return (0, exports.HubEventsApiFp)(this.configuration).lookupEvent(requestParameters.eventId, options).then((request) => request(this.axios, this.basePath));
    }
}
exports.HubEventsApi = HubEventsApi;
