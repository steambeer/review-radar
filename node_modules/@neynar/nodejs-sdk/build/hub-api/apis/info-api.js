"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * Farcaster Hub API
 * Perform basic queries of Farcaster state via the REST API of a Farcaster hub. See the [Neynar docs](https://docs.neynar.com/reference) for more details.
 *
 * The version of the OpenAPI document: 2.35.0
 * Contact: team@neynar.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.InfoApi = exports.InfoApiFactory = exports.InfoApiFp = exports.InfoApiAxiosParamCreator = void 0;
const axios_1 = __importDefault(require("axios"));
// Some imports not used depending on template conditions
// @ts-ignore
const common_1 = require("../common");
// @ts-ignore
const base_1 = require("../base");
/**
 * InfoApi - axios parameter creator
 * @export
 */
const InfoApiAxiosParamCreator = function (configuration) {
    return {
        /**
         * Retrieve hub information.
         * @summary Sync Methods
         * @param {boolean} dbstats Controls whether the response includes database statistics. When true, the response includes information about the hub\&#39;s database state, storage usage, and performance metrics.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         * @returns {Promise<HubInfoResponse>} A promise that resolves to a `HubInfoResponse` object
         *
         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/lookup-hub-info)
         *
         */
        lookupHubInfo: async (dbstats, options = {}) => {
            // verify required parameter 'dbstats' is not null or undefined
            (0, common_1.assertParamExists)('lookupHubInfo', 'dbstats', dbstats);
            const localVarPath = `/v1/info`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication ApiKeyAuth required
            await (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "x-api-key", configuration);
            if (dbstats !== undefined) {
                localVarQueryParameter['dbstats'] = dbstats;
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};
exports.InfoApiAxiosParamCreator = InfoApiAxiosParamCreator;
/**
 * InfoApi - functional programming interface
 * @export
 */
const InfoApiFp = function (configuration) {
    const localVarAxiosParamCreator = (0, exports.InfoApiAxiosParamCreator)(configuration);
    return {
        /**
         * Retrieve hub information.
         * @summary Sync Methods
         * @param {boolean} dbstats Controls whether the response includes database statistics. When true, the response includes information about the hub\&#39;s database state, storage usage, and performance metrics.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         * @returns {Promise<HubInfoResponse>} A promise that resolves to a `HubInfoResponse` object
         *
         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/lookup-hub-info)
         *
         */
        async lookupHubInfo(dbstats, options) {
            var _a, _b, _c;
            const localVarAxiosArgs = await localVarAxiosParamCreator.lookupHubInfo(dbstats, options);
            const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
            const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['InfoApi.lookupHubInfo']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    };
};
exports.InfoApiFp = InfoApiFp;
/**
 * InfoApi - factory interface
 * @export
 */
const InfoApiFactory = function (configuration, basePath, axios) {
    const localVarFp = (0, exports.InfoApiFp)(configuration);
    return {
        /**
         * Retrieve hub information.
         * @summary Sync Methods
         * @param {InfoApiLookupHubInfoRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         * @returns {Promise<HubInfoResponse>} A promise that resolves to a `HubInfoResponse` object
         *
         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/lookup-hub-info)
         *
         */
        lookupHubInfo(requestParameters, options) {
            return localVarFp.lookupHubInfo(requestParameters.dbstats, options).then((request) => request(axios, basePath));
        },
    };
};
exports.InfoApiFactory = InfoApiFactory;
/**
 * InfoApi - object-oriented interface
 * @export
 * @class InfoApi
 * @extends {BaseAPI}
 */
class InfoApi extends base_1.BaseAPI {
    /**
     * Retrieve hub information.
     * @summary Sync Methods
     * @param {InfoApiLookupHubInfoRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InfoApi
     * @returns {Promise<HubInfoResponse>} A promise that resolves to a `HubInfoResponse` object
     *
     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/lookup-hub-info)
     *
     */
    lookupHubInfo(requestParameters, options) {
        return (0, exports.InfoApiFp)(this.configuration).lookupHubInfo(requestParameters.dbstats, options).then((request) => request(this.axios, this.basePath));
    }
}
exports.InfoApi = InfoApi;
