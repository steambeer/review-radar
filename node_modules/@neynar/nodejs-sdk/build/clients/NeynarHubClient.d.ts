import { Logger } from "../common/logger";
import { AxiosInstance } from "axios";
import { Configuration } from './configuration';
import type { CastAdd, FetchCastReactions200Response, FetchCastsByParent200Response, FetchEvents200Response, FetchUserData200Response, FetchUserFollowing200Response, FetchUserOnChainEvents200Response, FetchUserOnChainSignersEvents200Response, FetchUsersCasts200Response, FetchVerificationsByFid200Response, FidsResponse, HubEvent, HubInfoResponse, LinkAdd, LinkType, Message, OnChainEventIdRegister, OnChainEventType, Reaction, ReactionType, StorageLimitsResponse, UserDataType, UserNameProof, UsernameProofsResponse, ValidateMessageResponse } from '../hub-api';
export interface NeynarHubClientOptions {
    logger?: Logger;
    axiosInstance?: AxiosInstance;
}
export declare class NeynarHubClient {
    private readonly logger;
    private config;
    private readonly apis;
    constructor(config: Configuration, options?: NeynarHubClientOptions);
    static isApiErrorResponse(error: any): boolean;
    /**
     * Retrieve all reply casts (responses) to a specific parent cast in the Farcaster network. Parent casts can be identified using either a combination of FID and hash, or by their URL. This endpoint enables traversal of conversation threads and retrieval of all responses to a particular cast.
     *
     * @summary By parent cast
     *
     * @param {object} params
     * @param {number} params.fid [optional]  - The Farcaster ID (FID) of the parent cast's creator. This parameter must be used together with the 'hash' parameter to uniquely identify a parent cast. Required only when using hash-based lookup instead of URL-based lookup. The FID is a unique identifier assigned to each Farcaster user.
     * @param {string} params.hash [optional]  - The unique hash identifier of the parent cast. Must be used together with the 'fid' parameter when doing hash-based lookup. This is a 40-character hexadecimal string prefixed with '0x' that uniquely identifies the cast within the creator's posts. Not required if using URL-based lookup.
     * @param {string} params.url [optional]  - Cast URL starting with 'chain://'
     * @param {number} params.pageSize [optional]  - Maximum number of messages to return in a single response
     * @param {boolean} params.reverse [optional]  - Reverse the sort order, returning latest messages first
     * @param {string} params.pageToken [optional]  - The page token returned by the previous query, to fetch the next page. If this parameter is empty, fetch the first page
     *
     * @returns {Promise<FetchCastsByParent200Response>} A promise that resolves to a `FetchCastsByParent200Response` object.
     *
     * @example
     *
     * // Fill in the appropriate values
     * const fid =
     * const hash =
     * const url =
     * const pageSize =
     * const reverse =
     * const pageToken =
     *
     * client.fetchCastsByParent({ fid, hash, url, pageSize, reverse, pageToken }).then(response => {
     *   console.log('response:', response);
     * });
     *
     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-casts-by-parent)
     *
     */
    fetchCastsByParent(params: {
        fid?: number;
        hash?: string;
        url?: string;
        pageSize?: number;
        reverse?: boolean;
        pageToken?: string;
    }): Promise<FetchCastsByParent200Response>;
    /**
     * Fetch casts mentioning a user.
     *
     * @summary Mentioning an FID
     *
     * @param {object} params
     * @param {number} params.fid  - The FID that is mentioned in a cast
     * @param {number} params.pageSize [optional]  - Maximum number of messages to return in a single response
     * @param {boolean} params.reverse [optional]  - Reverse the sort order, returning latest messages first
     * @param {string} params.pageToken [optional]  - The page token returned by the previous query, to fetch the next page. If this parameter is empty, fetch the first page
     *
     * @returns {Promise<FetchUsersCasts200Response>} A promise that resolves to a `FetchUsersCasts200Response` object.
     *
     * @example
     *
     * // Fill in the appropriate values
     * const fid =
     * const pageSize =
     * const reverse =
     * const pageToken =
     *
     * client.fetchCastsMentioningUser({ fid, pageSize, reverse, pageToken }).then(response => {
     *   console.log('response:', response);
     * });
     *
     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-casts-mentioning-user)
     *
     */
    fetchCastsMentioningUser(params: {
        fid: number;
        pageSize?: number;
        reverse?: boolean;
        pageToken?: string;
    }): Promise<FetchUsersCasts200Response>;
    /**
     * Fetch user\'s casts.
     *
     * @summary By FID
     *
     * @param {object} params
     * @param {number} params.fid  - The FID of the casts' creator
     * @param {number} params.pageSize [optional]  - Maximum number of messages to return in a single response
     * @param {boolean} params.reverse [optional]  - Reverse the sort order, returning latest messages first
     * @param {string} params.pageToken [optional]  - The page token returned by the previous query, to fetch the next page. If this parameter is empty, fetch the first page
     *
     * @returns {Promise<FetchUsersCasts200Response>} A promise that resolves to a `FetchUsersCasts200Response` object.
     *
     * @example
     *
     * // Fill in the appropriate values
     * const fid =
     * const pageSize =
     * const reverse =
     * const pageToken =
     *
     * client.fetchUsersCasts({ fid, pageSize, reverse, pageToken }).then(response => {
     *   console.log('response:', response);
     * });
     *
     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-users-casts)
     *
     */
    fetchUsersCasts(params: {
        fid: number;
        pageSize?: number;
        reverse?: boolean;
        pageToken?: string;
    }): Promise<FetchUsersCasts200Response>;
    /**
     * Lookup a cast by its FID and hash.
     *
     * @summary By FID and Hash
     *
     * @param {object} params
     * @param {number} params.fid  - The FID of the cast's creator
     * @param {string} params.hash  - The unique hash identifier of the cast. This is a 40-character hexadecimal string prefixed with '0x' that uniquely identifies a specific cast in the Farcaster network.
     *
     * @returns {Promise<CastAdd>} A promise that resolves to a `CastAdd` object.
     *
     * @example
     *
     * // Fill in the appropriate values
     * const fid =
     * const hash =
     *
     * client.lookupCastByHashAndFid({ fid, hash }).then(response => {
     *   console.log('response:', response);
     * });
     *
     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/lookup-cast-by-hash-and-fid)
     *
     */
    lookupCastByHashAndFid(params: {
        fid: number;
        hash: string;
    }): Promise<CastAdd>;
    /**
     * Fetch a list of all the FIDs.
     *
     * @summary Fetch a list of all the FIDs
     *
     * @param {object} params
     * @param {number} params.shardId  - The shard ID to filter by
     * @param {number} params.pageSize [optional]  - Maximum number of messages to return in a single response
     * @param {boolean} params.reverse [optional]  - Reverse the sort order, returning latest messages first
     * @param {string} params.pageToken [optional]  - The page token returned by the previous query, to fetch the next page. If this parameter is empty, fetch the first page
     *
     * @returns {Promise<FidsResponse>} A promise that resolves to a `FidsResponse` object.
     *
     * @example
     *
     * // Fill in the appropriate values
     * const shardId =
     * const pageSize =
     * const reverse =
     * const pageToken =
     *
     * client.fetchFids({ shardId, pageSize, reverse, pageToken }).then(response => {
     *   console.log('response:', response);
     * });
     *
     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-fids)
     *
     */
    fetchFids(params: {
        shardId: number;
        pageSize?: number;
        reverse?: boolean;
        pageToken?: string;
    }): Promise<FidsResponse>;
    /**
     * Fetch a list of events.
     *
     * @summary Page of events
     *
     * @param {object} params
     * @param {number} params.fromEventId [optional]  - An optional Hub Id to start getting events from. This is also returned from the API as nextPageEventId, which can be used to page through all the Hub events. Set it to 0 to start from the first event.
     *
     * @returns {Promise<FetchEvents200Response>} A promise that resolves to a `FetchEvents200Response` object.
     *
     * @example
     *
     * // Fill in the appropriate values
     * const fromEventId =
     *
     * client.fetchEvents({ fromEventId }).then(response => {
     *   console.log('response:', response);
     * });
     *
     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-events)
     *
     */
    fetchEvents(params: {
        fromEventId?: number;
    }): Promise<FetchEvents200Response>;
    /**
     * Lookup an event by its ID.
     *
     * @summary Event by ID
     *
     * @param {object} params
     * @param {number} params.eventId  - The Hub Id of the event
     *
     * @returns {Promise<HubEvent>} A promise that resolves to a `HubEvent` object.
     *
     * @example
     *
     * // Fill in the appropriate values
     * const eventId =
     *
     * client.lookupEvent({ eventId }).then(response => {
     *   console.log('response:', response);
     * });
     *
     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/lookup-event)
     *
     */
    lookupEvent(params: {
        eventId: number;
    }): Promise<HubEvent>;
    /**
     * Retrieve hub information.
     *
     * @summary Sync Methods
     *
     * @param {object} params
     * @param {boolean} params.dbstats  - Controls whether the response includes database statistics. When true, the response includes information about the hub's database state, storage usage, and performance metrics.
     *
     * @returns {Promise<HubInfoResponse>} A promise that resolves to a `HubInfoResponse` object.
     *
     * @example
     *
     * // Fill in the appropriate values
     * const dbstats =
     *
     * client.lookupHubInfo({ dbstats }).then(response => {
     *   console.log('response:', response);
     * });
     *
     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/lookup-hub-info)
     *
     */
    lookupHubInfo(params: {
        dbstats: boolean;
    }): Promise<HubInfoResponse>;
    /**
     * Fetch a list of users that are following a user.
     *
     * @summary To target FID
     *
     * @param {object} params
     * @param {number} params.targetFid  - The FID of the target user for this link
     * @param {LinkType} params.linkType [optional]
     * @param {number} params.pageSize [optional]  - Maximum number of messages to return in a single response
     * @param {boolean} params.reverse [optional]  - Reverse the sort order, returning latest messages first
     * @param {string} params.pageToken [optional]  - The page token returned by the previous query, to fetch the next page. If this parameter is empty, fetch the first page
     *
     * @returns {Promise<FetchUserFollowing200Response>} A promise that resolves to a `FetchUserFollowing200Response` object.
     *
     * @example
     *
     * // Fill in the appropriate values
     * const targetFid =
     * const linkType =
     * const pageSize =
     * const reverse =
     * const pageToken =
     *
     * client.fetchUserFollowers({ targetFid, linkType, pageSize, reverse, pageToken }).then(response => {
     *   console.log('response:', response);
     * });
     *
     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-user-followers)
     *
     */
    fetchUserFollowers(params: {
        targetFid: number;
        linkType?: LinkType;
        pageSize?: number;
        reverse?: boolean;
        pageToken?: string;
    }): Promise<FetchUserFollowing200Response>;
    /**
     * Fetch a list of users that a user is following.
     *
     * @summary From source FID
     *
     * @param {object} params
     * @param {number} params.fid  - The FID of the link's originator
     * @param {LinkType} params.linkType [optional]
     * @param {number} params.pageSize [optional]  - Maximum number of messages to return in a single response
     * @param {boolean} params.reverse [optional]  - Reverse the sort order, returning latest messages first
     * @param {string} params.pageToken [optional]  - The page token returned by the previous query, to fetch the next page. If this parameter is empty, fetch the first page
     *
     * @returns {Promise<FetchUserFollowing200Response>} A promise that resolves to a `FetchUserFollowing200Response` object.
     *
     * @example
     *
     * // Fill in the appropriate values
     * const fid =
     * const linkType =
     * const pageSize =
     * const reverse =
     * const pageToken =
     *
     * client.fetchUserFollowing({ fid, linkType, pageSize, reverse, pageToken }).then(response => {
     *   console.log('response:', response);
     * });
     *
     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-user-following)
     *
     */
    fetchUserFollowing(params: {
        fid: number;
        linkType?: LinkType;
        pageSize?: number;
        reverse?: boolean;
        pageToken?: string;
    }): Promise<FetchUserFollowing200Response>;
    /**
     * Lookup a link by its FID and target FID.
     *
     * @summary By its FID and target FID
     *
     * @param {object} params
     * @param {number} params.fid  - The FID of the link's originator
     * @param {number} params.targetFid  - The FID of the target user for this link
     * @param {LinkType} params.linkType
     *
     * @returns {Promise<LinkAdd>} A promise that resolves to a `LinkAdd` object.
     *
     * @example
     *
     * // Fill in the appropriate values
     * const fid =
     * const targetFid =
     * const linkType =
     *
     * client.lookupUserRelation({ fid, targetFid, linkType }).then(response => {
     *   console.log('response:', response);
     * });
     *
     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/lookup-user-relation)
     *
     */
    lookupUserRelation(params: {
        fid: number;
        targetFid: number;
        linkType: LinkType;
    }): Promise<LinkAdd>;
    /**
     * Submit a message to the Farcaster network.
     *
     * @summary Submit signed message
     *
     * @param {object} params
     * @param {File} params.body  - A Message is a delta operation on the Farcaster network. The message protobuf is an envelope that wraps a MessageData object and contains a hash and signature which can verify its authenticity.
     *
     * @returns {Promise<Message>} A promise that resolves to a `Message` object.
     *
     * @example
     *
     * // Fill in the appropriate values
     * const body =
     *
     * client.publishMessage({ body }).then(response => {
     *   console.log('response:', response);
     * });
     *
     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/submit-signed-message)
     *
     */
    publishMessage(params: {
        body: File;
    }): Promise<Message>;
    /**
     * Validate a message on the Farcaster network.
     *
     * @summary Validate signed message
     *
     * @param {object} params
     * @param {File} params.body  - A Message is a delta operation on the Farcaster network. The message protobuf is an envelope that wraps a MessageData object and contains a hash and signature which can verify its authenticity.
     *
     * @returns {Promise<ValidateMessageResponse>} A promise that resolves to a `ValidateMessageResponse` object.
     *
     * @example
     *
     * // Fill in the appropriate values
     * const body =
     *
     * client.validateMessage({ body }).then(response => {
     *   console.log('response:', response);
     * });
     *
     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/validate-message)
     *
     */
    validateMessage(params: {
        body: File;
    }): Promise<ValidateMessageResponse>;
    /**
     * Fetch on-chain events provided by a user.
     *
     * @summary Fetch a list of on-chain events provided by an FID
     *
     * @param {object} params
     * @param {number} params.fid  - The FID being requested
     * @param {OnChainEventType} params.eventType  - The numeric or string value of the event type being requested
     *
     * @returns {Promise<FetchUserOnChainEvents200Response>} A promise that resolves to a `FetchUserOnChainEvents200Response` object.
     *
     * @example
     *
     * // Fill in the appropriate values
     * const fid =
     * const eventType =
     *
     * client.fetchUserOnChainEvents({ fid, eventType }).then(response => {
     *   console.log('response:', response);
     * });
     *
     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-user-on-chain-events)
     *
     */
    fetchUserOnChainEvents(params: {
        fid: number;
        eventType: OnChainEventType;
    }): Promise<FetchUserOnChainEvents200Response>;
    /**
     * **Note:** one of two different response schemas is returned based on whether the caller provides the `signer` parameter. If included, a single `OnChainEventSigner` message is returned (or a `not_found` error). If omitted, a non-paginated list of `OnChainEventSigner` messages is returned instead.
     *
     * @summary Fetch a list of signers provided by an FID
     *
     * @param {object} params
     * @param {number} params.fid  - The FID being requested
     * @param {string} params.signer [optional]  - The optional key of signer
     *
     * @returns {Promise<FetchUserOnChainSignersEvents200Response>} A promise that resolves to a `FetchUserOnChainSignersEvents200Response` object.
     *
     * @example
     *
     * // Fill in the appropriate values
     * const fid =
     * const signer =
     *
     * client.fetchUserOnChainSignersEvents({ fid, signer }).then(response => {
     *   console.log('response:', response);
     * });
     *
     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-user-on-chain-signers)
     *
     */
    fetchUserOnChainSignersEvents(params: {
        fid: number;
        signer?: string;
    }): Promise<FetchUserOnChainSignersEvents200Response>;
    /**
     * Fetch an on-chain ID Registry Event for a given Address.
     *
     * @summary Fetch an on-chain ID Registry Event for a given Address
     *
     * @param {object} params
     * @param {string} params.address  - The ETH address being requested
     *
     * @returns {Promise<OnChainEventIdRegister>} A promise that resolves to a `OnChainEventIdRegister` object.
     *
     * @example
     *
     * // Fill in the appropriate values
     * const address =
     *
     * client.lookupOnChainIdRegistryEventByAddress({ address }).then(response => {
     *   console.log('response:', response);
     * });
     *
     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/lookup-on-chain-id-registry-event-by-address)
     *
     */
    lookupOnChainIdRegistryEventByAddress(params: {
        address: string;
    }): Promise<OnChainEventIdRegister>;
    /**
     * Retrieve all reactions (likes or recasts) on a specific cast in the Farcaster network. The cast is identified by its creator\'s FID and unique hash. This endpoint helps track engagement metrics and user interactions with specific content.
     *
     * @summary On cast
     *
     * @param {object} params
     * @param {number} params.targetFid  - The FID of the cast's creator. Required to uniquely identify the cast that received the reactions. Must be used in conjunction with target_hash.
     * @param {string} params.targetHash  - The unique hash identifier of the cast that received the reactions. This is a 40-character hexadecimal string prefixed with '0x' that uniquely identifies the cast within the creator's posts. Must be used with target_fid.
     * @param {ReactionType} params.reactionType
     * @param {number} params.pageSize [optional]  - Maximum number of messages to return in a single response
     * @param {boolean} params.reverse [optional]  - Reverse the sort order, returning latest messages first
     * @param {string} params.pageToken [optional]  - The page token returned by the previous query, to fetch the next page. If this parameter is empty, fetch the first page
     *
     * @returns {Promise<FetchCastReactions200Response>} A promise that resolves to a `FetchCastReactions200Response` object.
     *
     * @example
     *
     * // Fill in the appropriate values
     * const targetFid =
     * const targetHash =
     * const reactionType =
     * const pageSize =
     * const reverse =
     * const pageToken =
     *
     * client.fetchCastReactions({ targetFid, targetHash, reactionType, pageSize, reverse, pageToken }).then(response => {
     *   console.log('response:', response);
     * });
     *
     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-cast-reactions)
     *
     */
    fetchCastReactions(params: {
        targetFid: number;
        targetHash: string;
        reactionType: ReactionType;
        pageSize?: number;
        reverse?: boolean;
        pageToken?: string;
    }): Promise<FetchCastReactions200Response>;
    /**
     * Fetch all reactions of a specific type (like or recast) that target a given URL. This endpoint is useful for tracking engagement with content across the Farcaster network.
     *
     * @summary To a target URL
     *
     * @param {object} params
     * @param {string} params.url  - Target URL starting with 'chain://'.
     * @param {ReactionType} params.reactionType [optional]
     * @param {number} params.pageSize [optional]  - Maximum number of messages to return in a single response
     * @param {boolean} params.reverse [optional]  - Reverse the sort order, returning latest messages first
     * @param {string} params.pageToken [optional]  - The page token returned by the previous query, to fetch the next page. If this parameter is empty, fetch the first page
     *
     * @returns {Promise<FetchCastReactions200Response>} A promise that resolves to a `FetchCastReactions200Response` object.
     *
     * @example
     *
     * // Fill in the appropriate values
     * const url =
     * const reactionType =
     * const pageSize =
     * const reverse =
     * const pageToken =
     *
     * client.fetchReactionsByTarget({ url, reactionType, pageSize, reverse, pageToken }).then(response => {
     *   console.log('response:', response);
     * });
     *
     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-reactions-by-target)
     *
     */
    fetchReactionsByTarget(params: {
        url: string;
        reactionType?: ReactionType;
        pageSize?: number;
        reverse?: boolean;
        pageToken?: string;
    }): Promise<FetchCastReactions200Response>;
    /**
     * Fetch reactions by a user.
     *
     * @summary By FID
     *
     * @param {object} params
     * @param {number} params.fid  - The FID of the reaction's creator
     * @param {ReactionType} params.reactionType
     * @param {number} params.pageSize [optional]  - Maximum number of messages to return in a single response
     * @param {boolean} params.reverse [optional]  - Reverse the sort order, returning latest messages first
     * @param {string} params.pageToken [optional]  - The page token returned by the previous query, to fetch the next page. If this parameter is empty, fetch the first page
     *
     * @returns {Promise<FetchCastReactions200Response>} A promise that resolves to a `FetchCastReactions200Response` object.
     *
     * @example
     *
     * // Fill in the appropriate values
     * const fid =
     * const reactionType =
     * const pageSize =
     * const reverse =
     * const pageToken =
     *
     * client.fetchUserReactions({ fid, reactionType, pageSize, reverse, pageToken }).then(response => {
     *   console.log('response:', response);
     * });
     *
     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-user-reactions)
     *
     */
    fetchUserReactions(params: {
        fid: number;
        reactionType: ReactionType;
        pageSize?: number;
        reverse?: boolean;
        pageToken?: string;
    }): Promise<FetchCastReactions200Response>;
    /**
     * Lookup a reaction by its FID or cast.
     *
     * @summary By FID or cast
     *
     * @param {object} params
     * @param {number} params.fid  - The FID of the reaction's creator
     * @param {number} params.targetFid  - The FID of the cast's creator
     * @param {string} params.targetHash  - The cast's hash
     * @param {ReactionType} params.reactionType
     *
     * @returns {Promise<Reaction>} A promise that resolves to a `Reaction` object.
     *
     * @example
     *
     * // Fill in the appropriate values
     * const fid =
     * const targetFid =
     * const targetHash =
     * const reactionType =
     *
     * client.lookupReactionById({ fid, targetFid, targetHash, reactionType }).then(response => {
     *   console.log('response:', response);
     * });
     *
     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/lookup-reaction-by-id)
     *
     */
    lookupReactionById(params: {
        fid: number;
        targetFid: number;
        targetHash: string;
        reactionType: ReactionType;
    }): Promise<Reaction>;
    /**
     * Fetch a user\'s storage limits.
     *
     * @summary FID\'s limits
     *
     * @param {object} params
     * @param {number} params.fid
     *
     * @returns {Promise<StorageLimitsResponse>} A promise that resolves to a `StorageLimitsResponse` object.
     *
     * @example
     *
     * // Fill in the appropriate values
     * const fid =
     *
     * client.lookupUserStorageLimit({ fid }).then(response => {
     *   console.log('response:', response);
     * });
     *
     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/lookup-user-storage-limit)
     *
     */
    lookupUserStorageLimit(params: {
        fid: number;
    }): Promise<StorageLimitsResponse>;
    /**
     * **Note:** one of two different response schemas is returned based on whether the caller provides the `user_data_type` parameter. If included, a single `UserDataAdd` message is returned (or a `not_found` error). If omitted, a paginated list of `UserDataAdd` messages is returned instead.
     *
     * @summary Fetch UserData for a FID
     *
     * @param {object} params
     * @param {number} params.fid  - The FID that's being requested
     * @param {UserDataType} params.userDataType [optional]  - The type of user data, either as a numerical value or type string. If this is omitted, all user data for the FID is returned
     * @param {number} params.pageSize [optional]  - Maximum number of messages to return in a single response
     * @param {boolean} params.reverse [optional]  - Reverse the sort order, returning latest messages first
     * @param {string} params.pageToken [optional]  - The page token returned by the previous query, to fetch the next page. If this parameter is empty, fetch the first page
     *
     * @returns {Promise<FetchUserData200Response>} A promise that resolves to a `FetchUserData200Response` object.
     *
     * @example
     *
     * // Fill in the appropriate values
     * const fid =
     * const userDataType =
     * const pageSize =
     * const reverse =
     * const pageToken =
     *
     * client.fetchUserData({ fid, userDataType, pageSize, reverse, pageToken }).then(response => {
     *   console.log('response:', response);
     * });
     *
     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-user-data)
     *
     */
    fetchUserData(params: {
        fid: number;
        userDataType?: UserDataType;
        pageSize?: number;
        reverse?: boolean;
        pageToken?: string;
    }): Promise<FetchUserData200Response>;
    /**
     * Fetch a proof for a username.
     *
     * @summary Proof for a username
     *
     * @param {object} params
     * @param {string} params.name  - The Farcaster username or ENS address
     *
     * @returns {Promise<UserNameProof>} A promise that resolves to a `UserNameProof` object.
     *
     * @example
     *
     * // Fill in the appropriate values
     * const name =
     *
     * client.fetchUsernameProofByName({ name }).then(response => {
     *   console.log('response:', response);
     * });
     *
     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-username-proof-by-name)
     *
     */
    fetchUsernameProofByName(params: {
        name: string;
    }): Promise<UserNameProof>;
    /**
     * Fetch proofs provided by a user.
     *
     * @summary Proofs provided by an FID
     *
     * @param {object} params
     * @param {number} params.fid  - The FID being requested
     *
     * @returns {Promise<UsernameProofsResponse>} A promise that resolves to a `UsernameProofsResponse` object.
     *
     * @example
     *
     * // Fill in the appropriate values
     * const fid =
     *
     * client.fetchUsernameProofsByFid({ fid }).then(response => {
     *   console.log('response:', response);
     * });
     *
     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-username-proofs-by-fid)
     *
     */
    fetchUsernameProofsByFid(params: {
        fid: number;
    }): Promise<UsernameProofsResponse>;
    /**
     * Fetch verifications provided by a user.
     *
     * @summary Provided by an FID
     *
     * @param {object} params
     * @param {number} params.fid  - The FID being requested
     * @param {string} params.address [optional]  - The optional ETH address to filter by
     * @param {number} params.pageSize [optional]  - Maximum number of messages to return in a single response
     * @param {boolean} params.reverse [optional]  - Reverse the sort order, returning latest messages first
     * @param {string} params.pageToken [optional]  - The page token returned by the previous query, to fetch the next page. If this parameter is empty, fetch the first page
     *
     * @returns {Promise<FetchVerificationsByFid200Response>} A promise that resolves to a `FetchVerificationsByFid200Response` object.
     *
     * @example
     *
     * // Fill in the appropriate values
     * const fid =
     * const address =
     * const pageSize =
     * const reverse =
     * const pageToken =
     *
     * client.fetchVerificationsByFid({ fid, address, pageSize, reverse, pageToken }).then(response => {
     *   console.log('response:', response);
     * });
     *
     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-verifications-by-fid)
     *
     */
    fetchVerificationsByFid(params: {
        fid: number;
        address?: string;
        pageSize?: number;
        reverse?: boolean;
        pageToken?: string;
    }): Promise<FetchVerificationsByFid200Response>;
}
