/**
 * Neynar API
 * The Neynar API allows you to interact with the Farcaster protocol among other things. See the [Neynar docs](https://docs.neynar.com/reference) for more details.
 *
 * The version of the OpenAPI document: 3.26.0
 * Contact: team@neynar.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import { type RequestArgs, BaseAPI } from '../base';
import type { AuthorizationUrlResponse } from '../models';
import type { DeveloperManagedSigner } from '../models';
import type { RegisterDeveloperManagedSignedKeyReqBody } from '../models';
import type { RegisterSignerKeyReqBody } from '../models';
import type { Signer } from '../models';
import type { SignerListResponse } from '../models';
/**
 * SignerApi - axios parameter creator
 * @export
 */
export declare const SignerApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * Creates a signer and returns the signer status.   **Note**: While tesing please reuse the signer, it costs money to approve a signer.
     * @summary Create signer
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @returns {Promise<Signer>} A promise that resolves to a `Signer` object
     *
     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/create-signer)
     *
     */
    createSigner: (options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Fetch authorization url (Fetched authorized url useful for SIWN login operation)
     * @summary Fetch authorization url
     * @param {string} clientId
     * @param {FetchAuthorizationUrlResponseTypeEnum} responseType
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @returns {Promise<AuthorizationUrlResponse>} A promise that resolves to a `AuthorizationUrlResponse` object
     *
     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-authorization-url)
     *
     */
    fetchAuthorizationUrl: (clientId: string, responseType: FetchAuthorizationUrlResponseTypeEnum, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Fetches a list of signers for a custody address
     * @summary List signers
     * @param {string} message A Sign-In with Ethereum (SIWE) message that the user\&#39;s Ethereum wallet signs. This message includes details such as the domain, address, statement, URI, nonce, and other relevant information following the EIP-4361 standard. It should be structured and URL-encoded.
     * @param {string} signature The digital signature produced by signing the provided SIWE message with the user\&#39;s Ethereum private key. This signature is used to verify the authenticity of the message and the identity of the signer.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @returns {Promise<SignerListResponse>} A promise that resolves to a `SignerListResponse` object
     *
     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-signers)
     *
     */
    fetchSigners: (message: string, signature: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Fetches the status of a developer managed signer by public key
     * @summary Status by public key
     * @param {string} publicKey Ed25519 public key
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @returns {Promise<DeveloperManagedSigner>} A promise that resolves to a `DeveloperManagedSigner` object
     *
     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/lookup-developer-managed-signer)
     *
     */
    lookupDeveloperManagedSigner: (publicKey: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Gets information status of a signer by passing in a signer_uuid (Use post API to generate a signer)
     * @summary Status
     * @param {string} signerUuid UUID of the signer. &#x60;signer_uuid&#x60; is paired with API key, can\&#39;t use a &#x60;uuid&#x60; made with a different API key.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @returns {Promise<Signer>} A promise that resolves to a `Signer` object
     *
     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/lookup-signer)
     *
     */
    lookupSigner: (signerUuid: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Publish a message to farcaster. The message must be signed by a signer managed by the developer. Use the @farcaster/core library to construct and sign the message. Use the Message.toJSON method on the signed message and pass the JSON in the body of this POST request.
     * @summary Publish message
     * @param {object} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @returns {Promise<object>} A promise that resolves to a `object` object
     *
     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/publish-message-to-farcaster)
     *
     */
    publishMessageToFarcaster: (body: object, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Registers an app FID, deadline and a signature. Returns the signer status with an approval url.
     * @summary Register Signed Key
     * @param {RegisterSignerKeyReqBody} registerSignerKeyReqBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @returns {Promise<Signer>} A promise that resolves to a `Signer` object
     *
     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/register-signed-key)
     *
     */
    registerSignedKey: (registerSignerKeyReqBody: RegisterSignerKeyReqBody, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Registers an signed key and returns the developer managed signer status with an approval url.
     * @summary Register Signed Key
     * @param {RegisterDeveloperManagedSignedKeyReqBody} registerDeveloperManagedSignedKeyReqBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @returns {Promise<DeveloperManagedSigner>} A promise that resolves to a `DeveloperManagedSigner` object
     *
     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/register-signed-key-for-developer-managed-signer)
     *
     */
    registerSignedKeyForDeveloperManagedSigner: (registerDeveloperManagedSignedKeyReqBody: RegisterDeveloperManagedSignedKeyReqBody, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * SignerApi - functional programming interface
 * @export
 */
export declare const SignerApiFp: (configuration?: Configuration) => {
    /**
     * Creates a signer and returns the signer status.   **Note**: While tesing please reuse the signer, it costs money to approve a signer.
     * @summary Create signer
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @returns {Promise<Signer>} A promise that resolves to a `Signer` object
     *
     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/create-signer)
     *
     */
    createSigner(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Signer>>;
    /**
     * Fetch authorization url (Fetched authorized url useful for SIWN login operation)
     * @summary Fetch authorization url
     * @param {string} clientId
     * @param {FetchAuthorizationUrlResponseTypeEnum} responseType
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @returns {Promise<AuthorizationUrlResponse>} A promise that resolves to a `AuthorizationUrlResponse` object
     *
     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-authorization-url)
     *
     */
    fetchAuthorizationUrl(clientId: string, responseType: FetchAuthorizationUrlResponseTypeEnum, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AuthorizationUrlResponse>>;
    /**
     * Fetches a list of signers for a custody address
     * @summary List signers
     * @param {string} message A Sign-In with Ethereum (SIWE) message that the user\&#39;s Ethereum wallet signs. This message includes details such as the domain, address, statement, URI, nonce, and other relevant information following the EIP-4361 standard. It should be structured and URL-encoded.
     * @param {string} signature The digital signature produced by signing the provided SIWE message with the user\&#39;s Ethereum private key. This signature is used to verify the authenticity of the message and the identity of the signer.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @returns {Promise<SignerListResponse>} A promise that resolves to a `SignerListResponse` object
     *
     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-signers)
     *
     */
    fetchSigners(message: string, signature: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SignerListResponse>>;
    /**
     * Fetches the status of a developer managed signer by public key
     * @summary Status by public key
     * @param {string} publicKey Ed25519 public key
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @returns {Promise<DeveloperManagedSigner>} A promise that resolves to a `DeveloperManagedSigner` object
     *
     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/lookup-developer-managed-signer)
     *
     */
    lookupDeveloperManagedSigner(publicKey: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DeveloperManagedSigner>>;
    /**
     * Gets information status of a signer by passing in a signer_uuid (Use post API to generate a signer)
     * @summary Status
     * @param {string} signerUuid UUID of the signer. &#x60;signer_uuid&#x60; is paired with API key, can\&#39;t use a &#x60;uuid&#x60; made with a different API key.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @returns {Promise<Signer>} A promise that resolves to a `Signer` object
     *
     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/lookup-signer)
     *
     */
    lookupSigner(signerUuid: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Signer>>;
    /**
     * Publish a message to farcaster. The message must be signed by a signer managed by the developer. Use the @farcaster/core library to construct and sign the message. Use the Message.toJSON method on the signed message and pass the JSON in the body of this POST request.
     * @summary Publish message
     * @param {object} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @returns {Promise<object>} A promise that resolves to a `object` object
     *
     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/publish-message-to-farcaster)
     *
     */
    publishMessageToFarcaster(body: object, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>>;
    /**
     * Registers an app FID, deadline and a signature. Returns the signer status with an approval url.
     * @summary Register Signed Key
     * @param {RegisterSignerKeyReqBody} registerSignerKeyReqBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @returns {Promise<Signer>} A promise that resolves to a `Signer` object
     *
     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/register-signed-key)
     *
     */
    registerSignedKey(registerSignerKeyReqBody: RegisterSignerKeyReqBody, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Signer>>;
    /**
     * Registers an signed key and returns the developer managed signer status with an approval url.
     * @summary Register Signed Key
     * @param {RegisterDeveloperManagedSignedKeyReqBody} registerDeveloperManagedSignedKeyReqBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @returns {Promise<DeveloperManagedSigner>} A promise that resolves to a `DeveloperManagedSigner` object
     *
     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/register-signed-key-for-developer-managed-signer)
     *
     */
    registerSignedKeyForDeveloperManagedSigner(registerDeveloperManagedSignedKeyReqBody: RegisterDeveloperManagedSignedKeyReqBody, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DeveloperManagedSigner>>;
};
/**
 * SignerApi - factory interface
 * @export
 */
export declare const SignerApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * Creates a signer and returns the signer status.   **Note**: While tesing please reuse the signer, it costs money to approve a signer.
     * @summary Create signer
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @returns {Promise<Signer>} A promise that resolves to a `Signer` object
     *
     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/create-signer)
     *
     */
    createSigner(options?: RawAxiosRequestConfig): AxiosPromise<Signer>;
    /**
     * Fetch authorization url (Fetched authorized url useful for SIWN login operation)
     * @summary Fetch authorization url
     * @param {SignerApiFetchAuthorizationUrlRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @returns {Promise<AuthorizationUrlResponse>} A promise that resolves to a `AuthorizationUrlResponse` object
     *
     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-authorization-url)
     *
     */
    fetchAuthorizationUrl(requestParameters: SignerApiFetchAuthorizationUrlRequest, options?: RawAxiosRequestConfig): AxiosPromise<AuthorizationUrlResponse>;
    /**
     * Fetches a list of signers for a custody address
     * @summary List signers
     * @param {SignerApiFetchSignersRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @returns {Promise<SignerListResponse>} A promise that resolves to a `SignerListResponse` object
     *
     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-signers)
     *
     */
    fetchSigners(requestParameters: SignerApiFetchSignersRequest, options?: RawAxiosRequestConfig): AxiosPromise<SignerListResponse>;
    /**
     * Fetches the status of a developer managed signer by public key
     * @summary Status by public key
     * @param {SignerApiLookupDeveloperManagedSignerRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @returns {Promise<DeveloperManagedSigner>} A promise that resolves to a `DeveloperManagedSigner` object
     *
     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/lookup-developer-managed-signer)
     *
     */
    lookupDeveloperManagedSigner(requestParameters: SignerApiLookupDeveloperManagedSignerRequest, options?: RawAxiosRequestConfig): AxiosPromise<DeveloperManagedSigner>;
    /**
     * Gets information status of a signer by passing in a signer_uuid (Use post API to generate a signer)
     * @summary Status
     * @param {SignerApiLookupSignerRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @returns {Promise<Signer>} A promise that resolves to a `Signer` object
     *
     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/lookup-signer)
     *
     */
    lookupSigner(requestParameters: SignerApiLookupSignerRequest, options?: RawAxiosRequestConfig): AxiosPromise<Signer>;
    /**
     * Publish a message to farcaster. The message must be signed by a signer managed by the developer. Use the @farcaster/core library to construct and sign the message. Use the Message.toJSON method on the signed message and pass the JSON in the body of this POST request.
     * @summary Publish message
     * @param {SignerApiPublishMessageToFarcasterRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @returns {Promise<object>} A promise that resolves to a `object` object
     *
     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/publish-message-to-farcaster)
     *
     */
    publishMessageToFarcaster(requestParameters: SignerApiPublishMessageToFarcasterRequest, options?: RawAxiosRequestConfig): AxiosPromise<object>;
    /**
     * Registers an app FID, deadline and a signature. Returns the signer status with an approval url.
     * @summary Register Signed Key
     * @param {SignerApiRegisterSignedKeyRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @returns {Promise<Signer>} A promise that resolves to a `Signer` object
     *
     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/register-signed-key)
     *
     */
    registerSignedKey(requestParameters: SignerApiRegisterSignedKeyRequest, options?: RawAxiosRequestConfig): AxiosPromise<Signer>;
    /**
     * Registers an signed key and returns the developer managed signer status with an approval url.
     * @summary Register Signed Key
     * @param {SignerApiRegisterSignedKeyForDeveloperManagedSignerRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @returns {Promise<DeveloperManagedSigner>} A promise that resolves to a `DeveloperManagedSigner` object
     *
     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/register-signed-key-for-developer-managed-signer)
     *
     */
    registerSignedKeyForDeveloperManagedSigner(requestParameters: SignerApiRegisterSignedKeyForDeveloperManagedSignerRequest, options?: RawAxiosRequestConfig): AxiosPromise<DeveloperManagedSigner>;
};
/**
 * SignerApi - interface
 * @export
 * @interface SignerApi
 */
export interface SignerApiInterface {
    /**
     * Creates a signer and returns the signer status.   **Note**: While tesing please reuse the signer, it costs money to approve a signer.
     * @summary Create signer
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SignerApiInterface
     * @returns {Promise<Signer>} A promise that resolves to a `Signer` object
     *
     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/create-signer)
     *
     */
    createSigner(options?: RawAxiosRequestConfig): AxiosPromise<Signer>;
    /**
     * Fetch authorization url (Fetched authorized url useful for SIWN login operation)
     * @summary Fetch authorization url
     * @param {SignerApiFetchAuthorizationUrlRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SignerApiInterface
     * @returns {Promise<AuthorizationUrlResponse>} A promise that resolves to a `AuthorizationUrlResponse` object
     *
     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-authorization-url)
     *
     */
    fetchAuthorizationUrl(requestParameters: SignerApiFetchAuthorizationUrlRequest, options?: RawAxiosRequestConfig): AxiosPromise<AuthorizationUrlResponse>;
    /**
     * Fetches a list of signers for a custody address
     * @summary List signers
     * @param {SignerApiFetchSignersRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SignerApiInterface
     * @returns {Promise<SignerListResponse>} A promise that resolves to a `SignerListResponse` object
     *
     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-signers)
     *
     */
    fetchSigners(requestParameters: SignerApiFetchSignersRequest, options?: RawAxiosRequestConfig): AxiosPromise<SignerListResponse>;
    /**
     * Fetches the status of a developer managed signer by public key
     * @summary Status by public key
     * @param {SignerApiLookupDeveloperManagedSignerRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SignerApiInterface
     * @returns {Promise<DeveloperManagedSigner>} A promise that resolves to a `DeveloperManagedSigner` object
     *
     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/lookup-developer-managed-signer)
     *
     */
    lookupDeveloperManagedSigner(requestParameters: SignerApiLookupDeveloperManagedSignerRequest, options?: RawAxiosRequestConfig): AxiosPromise<DeveloperManagedSigner>;
    /**
     * Gets information status of a signer by passing in a signer_uuid (Use post API to generate a signer)
     * @summary Status
     * @param {SignerApiLookupSignerRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SignerApiInterface
     * @returns {Promise<Signer>} A promise that resolves to a `Signer` object
     *
     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/lookup-signer)
     *
     */
    lookupSigner(requestParameters: SignerApiLookupSignerRequest, options?: RawAxiosRequestConfig): AxiosPromise<Signer>;
    /**
     * Publish a message to farcaster. The message must be signed by a signer managed by the developer. Use the @farcaster/core library to construct and sign the message. Use the Message.toJSON method on the signed message and pass the JSON in the body of this POST request.
     * @summary Publish message
     * @param {SignerApiPublishMessageToFarcasterRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SignerApiInterface
     * @returns {Promise<object>} A promise that resolves to a `object` object
     *
     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/publish-message-to-farcaster)
     *
     */
    publishMessageToFarcaster(requestParameters: SignerApiPublishMessageToFarcasterRequest, options?: RawAxiosRequestConfig): AxiosPromise<object>;
    /**
     * Registers an app FID, deadline and a signature. Returns the signer status with an approval url.
     * @summary Register Signed Key
     * @param {SignerApiRegisterSignedKeyRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SignerApiInterface
     * @returns {Promise<Signer>} A promise that resolves to a `Signer` object
     *
     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/register-signed-key)
     *
     */
    registerSignedKey(requestParameters: SignerApiRegisterSignedKeyRequest, options?: RawAxiosRequestConfig): AxiosPromise<Signer>;
    /**
     * Registers an signed key and returns the developer managed signer status with an approval url.
     * @summary Register Signed Key
     * @param {SignerApiRegisterSignedKeyForDeveloperManagedSignerRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SignerApiInterface
     * @returns {Promise<DeveloperManagedSigner>} A promise that resolves to a `DeveloperManagedSigner` object
     *
     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/register-signed-key-for-developer-managed-signer)
     *
     */
    registerSignedKeyForDeveloperManagedSigner(requestParameters: SignerApiRegisterSignedKeyForDeveloperManagedSignerRequest, options?: RawAxiosRequestConfig): AxiosPromise<DeveloperManagedSigner>;
}
/**
 * Request parameters for fetchAuthorizationUrl operation in SignerApi.
 * @export
 * @interface SignerApiFetchAuthorizationUrlRequest
 */
export interface SignerApiFetchAuthorizationUrlRequest {
    /**
     *
     *
     *
     *
     * @type {string}
     * @memberof SignerApiFetchAuthorizationUrl
     */
    readonly clientId: string;
    /**
     *
     *
     *
     *
     * @type {'code'}
     * @memberof SignerApiFetchAuthorizationUrl
     */
    readonly responseType: FetchAuthorizationUrlResponseTypeEnum;
}
/**
 * Request parameters for fetchSigners operation in SignerApi.
 * @export
 * @interface SignerApiFetchSignersRequest
 */
export interface SignerApiFetchSignersRequest {
    /**
     * A Sign-In with Ethereum (SIWE) message that the user\&#39;s Ethereum wallet signs. This message includes details such as the domain, address, statement, URI, nonce, and other relevant information following the EIP-4361 standard. It should be structured and URL-encoded.
     *
     *
     *
     * @type {string}
     * @memberof SignerApiFetchSigners
     */
    readonly message: string;
    /**
     * The digital signature produced by signing the provided SIWE message with the user\&#39;s Ethereum private key. This signature is used to verify the authenticity of the message and the identity of the signer.
     *
     *
     *
     * @type {string}
     * @memberof SignerApiFetchSigners
     */
    readonly signature: string;
}
/**
 * Request parameters for lookupDeveloperManagedSigner operation in SignerApi.
 * @export
 * @interface SignerApiLookupDeveloperManagedSignerRequest
 */
export interface SignerApiLookupDeveloperManagedSignerRequest {
    /**
     * Ed25519 public key
     *
     *
     *
     * @type {string}
     * @memberof SignerApiLookupDeveloperManagedSigner
     */
    readonly publicKey: string;
}
/**
 * Request parameters for lookupSigner operation in SignerApi.
 * @export
 * @interface SignerApiLookupSignerRequest
 */
export interface SignerApiLookupSignerRequest {
    /**
     * UUID of the signer. &#x60;signer_uuid&#x60; is paired with API key, can\&#39;t use a &#x60;uuid&#x60; made with a different API key.
     *
     *
     *
     * @type {string}
     * @memberof SignerApiLookupSigner
     */
    readonly signerUuid: string;
}
/**
 * Request parameters for publishMessageToFarcaster operation in SignerApi.
 * @export
 * @interface SignerApiPublishMessageToFarcasterRequest
 */
export interface SignerApiPublishMessageToFarcasterRequest {
    /**
     *
     *
     *
     *
     * @type {object}
     * @memberof SignerApiPublishMessageToFarcaster
     */
    readonly body: object;
}
/**
 * Request parameters for registerSignedKey operation in SignerApi.
 * @export
 * @interface SignerApiRegisterSignedKeyRequest
 */
export interface SignerApiRegisterSignedKeyRequest {
    /**
     *
     *
     *
     *
     * @type {RegisterSignerKeyReqBody}
     * @memberof SignerApiRegisterSignedKey
     */
    readonly registerSignerKeyReqBody: RegisterSignerKeyReqBody;
}
/**
 * Request parameters for registerSignedKeyForDeveloperManagedSigner operation in SignerApi.
 * @export
 * @interface SignerApiRegisterSignedKeyForDeveloperManagedSignerRequest
 */
export interface SignerApiRegisterSignedKeyForDeveloperManagedSignerRequest {
    /**
     *
     *
     *
     *
     * @type {RegisterDeveloperManagedSignedKeyReqBody}
     * @memberof SignerApiRegisterSignedKeyForDeveloperManagedSigner
     */
    readonly registerDeveloperManagedSignedKeyReqBody: RegisterDeveloperManagedSignedKeyReqBody;
}
/**
 * SignerApi - object-oriented interface
 * @export
 * @class SignerApi
 * @extends {BaseAPI}
 */
export declare class SignerApi extends BaseAPI implements SignerApiInterface {
    /**
     * Creates a signer and returns the signer status.   **Note**: While tesing please reuse the signer, it costs money to approve a signer.
     * @summary Create signer
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SignerApi
     * @returns {Promise<Signer>} A promise that resolves to a `Signer` object
     *
     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/create-signer)
     *
     */
    createSigner(options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<Signer, any>>;
    /**
     * Fetch authorization url (Fetched authorized url useful for SIWN login operation)
     * @summary Fetch authorization url
     * @param {SignerApiFetchAuthorizationUrlRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SignerApi
     * @returns {Promise<AuthorizationUrlResponse>} A promise that resolves to a `AuthorizationUrlResponse` object
     *
     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-authorization-url)
     *
     */
    fetchAuthorizationUrl(requestParameters: SignerApiFetchAuthorizationUrlRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<AuthorizationUrlResponse, any>>;
    /**
     * Fetches a list of signers for a custody address
     * @summary List signers
     * @param {SignerApiFetchSignersRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SignerApi
     * @returns {Promise<SignerListResponse>} A promise that resolves to a `SignerListResponse` object
     *
     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-signers)
     *
     */
    fetchSigners(requestParameters: SignerApiFetchSignersRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<SignerListResponse, any>>;
    /**
     * Fetches the status of a developer managed signer by public key
     * @summary Status by public key
     * @param {SignerApiLookupDeveloperManagedSignerRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SignerApi
     * @returns {Promise<DeveloperManagedSigner>} A promise that resolves to a `DeveloperManagedSigner` object
     *
     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/lookup-developer-managed-signer)
     *
     */
    lookupDeveloperManagedSigner(requestParameters: SignerApiLookupDeveloperManagedSignerRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<DeveloperManagedSigner, any>>;
    /**
     * Gets information status of a signer by passing in a signer_uuid (Use post API to generate a signer)
     * @summary Status
     * @param {SignerApiLookupSignerRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SignerApi
     * @returns {Promise<Signer>} A promise that resolves to a `Signer` object
     *
     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/lookup-signer)
     *
     */
    lookupSigner(requestParameters: SignerApiLookupSignerRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<Signer, any>>;
    /**
     * Publish a message to farcaster. The message must be signed by a signer managed by the developer. Use the @farcaster/core library to construct and sign the message. Use the Message.toJSON method on the signed message and pass the JSON in the body of this POST request.
     * @summary Publish message
     * @param {SignerApiPublishMessageToFarcasterRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SignerApi
     * @returns {Promise<object>} A promise that resolves to a `object` object
     *
     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/publish-message-to-farcaster)
     *
     */
    publishMessageToFarcaster(requestParameters: SignerApiPublishMessageToFarcasterRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<object, any>>;
    /**
     * Registers an app FID, deadline and a signature. Returns the signer status with an approval url.
     * @summary Register Signed Key
     * @param {SignerApiRegisterSignedKeyRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SignerApi
     * @returns {Promise<Signer>} A promise that resolves to a `Signer` object
     *
     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/register-signed-key)
     *
     */
    registerSignedKey(requestParameters: SignerApiRegisterSignedKeyRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<Signer, any>>;
    /**
     * Registers an signed key and returns the developer managed signer status with an approval url.
     * @summary Register Signed Key
     * @param {SignerApiRegisterSignedKeyForDeveloperManagedSignerRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SignerApi
     * @returns {Promise<DeveloperManagedSigner>} A promise that resolves to a `DeveloperManagedSigner` object
     *
     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/register-signed-key-for-developer-managed-signer)
     *
     */
    registerSignedKeyForDeveloperManagedSigner(requestParameters: SignerApiRegisterSignedKeyForDeveloperManagedSignerRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<DeveloperManagedSigner, any>>;
}
/**
 * @export
 */
export declare const FetchAuthorizationUrlResponseTypeEnum: {
    readonly Code: "code";
};
export type FetchAuthorizationUrlResponseTypeEnum = typeof FetchAuthorizationUrlResponseTypeEnum[keyof typeof FetchAuthorizationUrlResponseTypeEnum];
