/**
 * Neynar API
 * The Neynar API allows you to interact with the Farcaster protocol among other things. See the [Neynar docs](https://docs.neynar.com/reference) for more details.
 *
 * The version of the OpenAPI document: 3.26.0
 * Contact: team@neynar.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import { type RequestArgs, BaseAPI } from '../base';
import type { BulkCastsResponse } from '../models';
import type { FeedResponse } from '../models';
/**
 * FeedApi - axios parameter creator
 * @export
 */
export declare const FeedApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * Fetch casts for a given user FID in reverse chronological order. Also allows filtering by parent_url and channel
     * @summary Chronologically
     * @param {number} fid FID of user whose recent casts you want to fetch
     * @param {boolean} [xNeynarExperimental] Enables experimental features including filtering based on the Neynar score. See [docs](https://neynar.notion.site/Experimental-Features-1d2655195a8b80eb98b4d4ae7b76ae4a) for more details.
     * @param {number} [appFid] Optionally filter to casts created via a specific app FID, e.g. 9152 for Warpcast
     * @param {number} [viewerFid] FID of the user viewing the feed
     * @param {number} [limit] Number of results to fetch  (Default: 25, Maximum: 150)
     * @param {string} [cursor] Pagination cursor
     * @param {boolean | null} [includeReplies] Include reply casts by the author in the response, true by default
     * @param {string} [parentUrl] Parent URL to filter the feed; mutually exclusive with channel_id
     * @param {string} [channelId] Channel ID to filter the feed; mutually exclusive with parent_url
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @returns {Promise<FeedResponse>} A promise that resolves to a `FeedResponse` object
     *
     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-casts-for-user)
     *
     */
    fetchCastsForUser: (fid: number, xNeynarExperimental?: boolean, appFid?: number, viewerFid?: number, limit?: number, cursor?: string, includeReplies?: boolean | null, parentUrl?: string, channelId?: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Fetch casts based on filters. Ensure setting the correct parameters based on the feed_type and filter_type.
     * @summary By filters
     * @param {boolean} [xNeynarExperimental] Enables experimental features including filtering based on the Neynar score. See [docs](https://neynar.notion.site/Experimental-Features-1d2655195a8b80eb98b4d4ae7b76ae4a) for more details.
     * @param {FetchFeedFeedTypeEnum} [feedType] Defaults to following (requires FID or address). If set to filter (requires filter_type)
     * @param {FetchFeedFilterTypeEnum} [filterType] Used when feed_type&#x3D;filter. Can be set to FIDs (requires FIDs) or parent_url (requires parent_url) or channel_id (requires channel_id)
     * @param {number} [fid] (Optional) FID of user whose feed you want to create. By default, the API expects this field, except if you pass a filter_type
     * @param {string} [fids] Used when filter_type&#x3D;FIDs . Create a feed based on a list of FIDs. Max array size is 100. Requires feed_type and filter_type.
     * @param {string} [parentUrl] Used when filter_type&#x3D;parent_url can be used to fetch content under any parent url e.g. FIP-2 channels on Warpcast. Requires feed_type and filter_type.
     * @param {string} [channelId] Used when filter_type&#x3D;channel_id can be used to fetch casts under a channel. Requires feed_type and filter_type.
     * @param {boolean | null} [membersOnly] Used when filter_type&#x3D;channel_id. Only include casts from members of the channel. True by default.
     * @param {string} [embedUrl] Used when filter_type&#x3D;embed_url. Casts with embedded URLs prefixed by this embed_url param will be returned. We normalize your given URL prefix and prepend \&#39;https://\&#39; if no protocol is included. Requires feed_type and filter_type.
     * @param {Array<FetchFeedEmbedTypesEnum>} [embedTypes] Used when filter_type&#x3D;embed_types can be used to fetch all casts with matching content types. Requires feed_type and filter_type.
     * @param {boolean | null} [withRecasts] Include recasts in the response, true by default
     * @param {number} [limit] Number of results to fetch  (Default: 25, Maximum: 100)
     * @param {string} [cursor] Pagination cursor.
     * @param {number} [viewerFid] Providing this will return a feed that respects this user\&#39;s mutes and blocks and includes &#x60;viewer_context&#x60;.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @returns {Promise<FeedResponse>} A promise that resolves to a `FeedResponse` object
     *
     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-feed)
     *
     */
    fetchFeed: (xNeynarExperimental?: boolean, feedType?: FetchFeedFeedTypeEnum, filterType?: FetchFeedFilterTypeEnum, fid?: number, fids?: string, parentUrl?: string, channelId?: string, membersOnly?: boolean | null, embedUrl?: string, embedTypes?: Array<FetchFeedEmbedTypesEnum>, withRecasts?: boolean | null, limit?: number, cursor?: string, viewerFid?: number, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Fetch feed based on channel IDs
     * @summary By channel IDs
     * @param {string} channelIds Comma separated list of up to 10 channel IDs e.g. neynar,farcaster
     * @param {boolean} [xNeynarExperimental] Enables experimental features including filtering based on the Neynar score. See [docs](https://neynar.notion.site/Experimental-Features-1d2655195a8b80eb98b4d4ae7b76ae4a) for more details.
     * @param {boolean | null} [withRecasts] Include recasts in the response, true by default
     * @param {number} [viewerFid] Providing this will return a feed that respects this user\&#39;s mutes and blocks and includes &#x60;viewer_context&#x60;.
     * @param {boolean | null} [withReplies] Include replies in the response, false by default
     * @param {boolean | null} [membersOnly] Used when filter_type&#x3D;channel_id. Only include casts from members of the channel. True by default.
     * @param {string} [fids] Comma separated list of FIDs to filter the feed by, up to 10 at a time
     * @param {number} [limit] Number of results to fetch  (Default: 25, Maximum: 100)
     * @param {string} [cursor] Pagination cursor.
     * @param {boolean | null} [shouldModerate] If true, only casts that have been liked by the moderator (if one exists) will be returned.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @returns {Promise<FeedResponse>} A promise that resolves to a `FeedResponse` object
     *
     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-feed-by-channel-ids)
     *
     */
    fetchFeedByChannelIds: (channelIds: string, xNeynarExperimental?: boolean, withRecasts?: boolean | null, viewerFid?: number, withReplies?: boolean | null, membersOnly?: boolean | null, fids?: string, limit?: number, cursor?: string, shouldModerate?: boolean | null, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Fetch feed based on parent URLs
     * @summary By parent URLs
     * @param {string} parentUrls Comma separated list of parent_urls
     * @param {boolean} [xNeynarExperimental] Enables experimental features including filtering based on the Neynar score. See [docs](https://neynar.notion.site/Experimental-Features-1d2655195a8b80eb98b4d4ae7b76ae4a) for more details.
     * @param {boolean | null} [withRecasts] Include recasts in the response, true by default
     * @param {number} [viewerFid] Providing this will return a feed that respects this user\&#39;s mutes and blocks and includes &#x60;viewer_context&#x60;.
     * @param {boolean | null} [withReplies] Include replies in the response, false by default
     * @param {number} [limit] Number of results to fetch  (Default: 25, Maximum: 100)
     * @param {string} [cursor] Pagination cursor.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @returns {Promise<FeedResponse>} A promise that resolves to a `FeedResponse` object
     *
     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-feed-by-parent-urls)
     *
     */
    fetchFeedByParentUrls: (parentUrls: string, xNeynarExperimental?: boolean, withRecasts?: boolean | null, viewerFid?: number, withReplies?: boolean | null, limit?: number, cursor?: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Fetch a personalized For You feed for a user
     * @summary For you
     * @param {number} fid FID of user whose feed you want to create
     * @param {boolean} [xNeynarExperimental] Enables experimental features including filtering based on the Neynar score. See [docs](https://neynar.notion.site/Experimental-Features-1d2655195a8b80eb98b4d4ae7b76ae4a) for more details.
     * @param {number} [viewerFid] Providing this will return a feed that respects this user\&#39;s mutes and blocks and includes &#x60;viewer_context&#x60;.
     * @param {FetchFeedForYouProviderEnum} [provider] The provider of the For You feed.
     * @param {number} [limit] Number of results to fetch  (Default: 25, Maximum: 50)
     * @param {string} [cursor] Pagination cursor.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @returns {Promise<FeedResponse>} A promise that resolves to a `FeedResponse` object
     *
     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-feed-for-you)
     *
     */
    fetchFeedForYou: (fid: number, xNeynarExperimental?: boolean, viewerFid?: number, provider?: FetchFeedForYouProviderEnum, limit?: number, cursor?: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Fetch feed of casts with mini apps, reverse chronological order
     * @summary Casts with mini apps
     * @param {boolean} [xNeynarExperimental] Enables experimental features including filtering based on the Neynar score. See [docs](https://neynar.notion.site/Experimental-Features-1d2655195a8b80eb98b4d4ae7b76ae4a) for more details.
     * @param {number} [limit] Number of results to fetch  (Default: 25, Maximum: 100)
     * @param {number} [viewerFid] Providing this will return a feed that respects this user\&#39;s mutes and blocks and includes &#x60;viewer_context&#x60;.
     * @param {string} [cursor] Pagination cursor.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @returns {Promise<FeedResponse>} A promise that resolves to a `FeedResponse` object
     *
     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-frames-only-feed)
     *
     */
    fetchFramesOnlyFeed: (xNeynarExperimental?: boolean, limit?: number, viewerFid?: number, cursor?: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Fetch 10 most popular casts for a given user FID; popularity based on replies, likes and recasts; sorted by most popular first
     * @summary 10 most popular casts
     * @param {number} fid FID of user whose feed you want to create
     * @param {number} [viewerFid]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @returns {Promise<BulkCastsResponse>} A promise that resolves to a `BulkCastsResponse` object
     *
     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-popular-casts-by-user)
     *
     */
    fetchPopularCastsByUser: (fid: number, viewerFid?: number, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Fetch recent replies and recasts for a given user FID; sorted by most recent first
     * @summary Replies and recasts
     * @param {number} fid FID of user whose replies and recasts you want to fetch
     * @param {FetchRepliesAndRecastsForUserFilterEnum} [filter] Filter to fetch only replies or recasts
     * @param {number} [limit] Number of results to fetch  (Default: 25, Maximum: 50)
     * @param {string} [cursor] Pagination cursor.
     * @param {number} [viewerFid] Providing this will return a feed that respects this user\&#39;s mutes and blocks and includes &#x60;viewer_context&#x60;.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @returns {Promise<FeedResponse>} A promise that resolves to a `FeedResponse` object
     *
     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-replies-and-recasts-for-user)
     *
     */
    fetchRepliesAndRecastsForUser: (fid: number, filter?: FetchRepliesAndRecastsForUserFilterEnum, limit?: number, cursor?: string, viewerFid?: number, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Fetch trending casts or on the global feed or channels feeds. 7d time window available for channel feeds only.
     * @summary Trending feeds
     * @param {boolean} [xNeynarExperimental] Enables experimental features including filtering based on the Neynar score. See [docs](https://neynar.notion.site/Experimental-Features-1d2655195a8b80eb98b4d4ae7b76ae4a) for more details.
     * @param {number} [limit] Number of results to fetch  (Default: 10, Maximum: 10)
     * @param {string} [cursor] Pagination cursor
     * @param {number} [viewerFid] Providing this will return a feed that respects this user\&#39;s mutes and blocks and includes &#x60;viewer_context&#x60;.
     * @param {FetchTrendingFeedTimeWindowEnum} [timeWindow] Time window for trending casts (7d window for channel feeds only)
     * @param {string} [channelId] Channel ID to filter trending casts. Less active channels might have no casts in the time window selected. Provide either &#x60;channel_id&#x60; or &#x60;parent_url&#x60;, not both.
     * @param {string} [parentUrl] Parent URL to filter trending casts. Less active channels might have no casts in the time window selected. Provide either &#x60;channel_id&#x60; or &#x60;parent_url&#x60;, not both.
     * @param {FetchTrendingFeedProviderEnum} [provider] The provider of the trending casts feed.
     * @param {string} [providerMetadata] provider_metadata is a URI-encoded stringified JSON object that can be used to pass additional metadata to the provider. Only available for mbd provider right now. See [here](https://docs.neynar.com/docs/feed-for-you-w-external-providers) on how to use.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @returns {Promise<FeedResponse>} A promise that resolves to a `FeedResponse` object
     *
     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-trending-feed)
     *
     */
    fetchTrendingFeed: (xNeynarExperimental?: boolean, limit?: number, cursor?: string, viewerFid?: number, timeWindow?: FetchTrendingFeedTimeWindowEnum, channelId?: string, parentUrl?: string, provider?: FetchTrendingFeedProviderEnum, providerMetadata?: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Fetch feed based on who a user is following
     * @summary Following
     * @param {number} fid FID of user whose feed you want to create
     * @param {boolean} [xNeynarExperimental] Enables experimental features including filtering based on the Neynar score. See [docs](https://neynar.notion.site/Experimental-Features-1d2655195a8b80eb98b4d4ae7b76ae4a) for more details.
     * @param {number} [viewerFid] Providing this will return a feed that respects this user\&#39;s mutes and blocks and includes &#x60;viewer_context&#x60;.
     * @param {boolean | null} [withRecasts] Include recasts in the response, true by default
     * @param {number} [limit] Number of results to fetch  (Default: 25, Maximum: 100)
     * @param {string} [cursor] Pagination cursor.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @returns {Promise<FeedResponse>} A promise that resolves to a `FeedResponse` object
     *
     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-user-following-feed)
     *
     */
    fetchUserFollowingFeed: (fid: number, xNeynarExperimental?: boolean, viewerFid?: number, withRecasts?: boolean | null, limit?: number, cursor?: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * FeedApi - functional programming interface
 * @export
 */
export declare const FeedApiFp: (configuration?: Configuration) => {
    /**
     * Fetch casts for a given user FID in reverse chronological order. Also allows filtering by parent_url and channel
     * @summary Chronologically
     * @param {number} fid FID of user whose recent casts you want to fetch
     * @param {boolean} [xNeynarExperimental] Enables experimental features including filtering based on the Neynar score. See [docs](https://neynar.notion.site/Experimental-Features-1d2655195a8b80eb98b4d4ae7b76ae4a) for more details.
     * @param {number} [appFid] Optionally filter to casts created via a specific app FID, e.g. 9152 for Warpcast
     * @param {number} [viewerFid] FID of the user viewing the feed
     * @param {number} [limit] Number of results to fetch  (Default: 25, Maximum: 150)
     * @param {string} [cursor] Pagination cursor
     * @param {boolean | null} [includeReplies] Include reply casts by the author in the response, true by default
     * @param {string} [parentUrl] Parent URL to filter the feed; mutually exclusive with channel_id
     * @param {string} [channelId] Channel ID to filter the feed; mutually exclusive with parent_url
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @returns {Promise<FeedResponse>} A promise that resolves to a `FeedResponse` object
     *
     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-casts-for-user)
     *
     */
    fetchCastsForUser(fid: number, xNeynarExperimental?: boolean, appFid?: number, viewerFid?: number, limit?: number, cursor?: string, includeReplies?: boolean | null, parentUrl?: string, channelId?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FeedResponse>>;
    /**
     * Fetch casts based on filters. Ensure setting the correct parameters based on the feed_type and filter_type.
     * @summary By filters
     * @param {boolean} [xNeynarExperimental] Enables experimental features including filtering based on the Neynar score. See [docs](https://neynar.notion.site/Experimental-Features-1d2655195a8b80eb98b4d4ae7b76ae4a) for more details.
     * @param {FetchFeedFeedTypeEnum} [feedType] Defaults to following (requires FID or address). If set to filter (requires filter_type)
     * @param {FetchFeedFilterTypeEnum} [filterType] Used when feed_type&#x3D;filter. Can be set to FIDs (requires FIDs) or parent_url (requires parent_url) or channel_id (requires channel_id)
     * @param {number} [fid] (Optional) FID of user whose feed you want to create. By default, the API expects this field, except if you pass a filter_type
     * @param {string} [fids] Used when filter_type&#x3D;FIDs . Create a feed based on a list of FIDs. Max array size is 100. Requires feed_type and filter_type.
     * @param {string} [parentUrl] Used when filter_type&#x3D;parent_url can be used to fetch content under any parent url e.g. FIP-2 channels on Warpcast. Requires feed_type and filter_type.
     * @param {string} [channelId] Used when filter_type&#x3D;channel_id can be used to fetch casts under a channel. Requires feed_type and filter_type.
     * @param {boolean | null} [membersOnly] Used when filter_type&#x3D;channel_id. Only include casts from members of the channel. True by default.
     * @param {string} [embedUrl] Used when filter_type&#x3D;embed_url. Casts with embedded URLs prefixed by this embed_url param will be returned. We normalize your given URL prefix and prepend \&#39;https://\&#39; if no protocol is included. Requires feed_type and filter_type.
     * @param {Array<FetchFeedEmbedTypesEnum>} [embedTypes] Used when filter_type&#x3D;embed_types can be used to fetch all casts with matching content types. Requires feed_type and filter_type.
     * @param {boolean | null} [withRecasts] Include recasts in the response, true by default
     * @param {number} [limit] Number of results to fetch  (Default: 25, Maximum: 100)
     * @param {string} [cursor] Pagination cursor.
     * @param {number} [viewerFid] Providing this will return a feed that respects this user\&#39;s mutes and blocks and includes &#x60;viewer_context&#x60;.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @returns {Promise<FeedResponse>} A promise that resolves to a `FeedResponse` object
     *
     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-feed)
     *
     */
    fetchFeed(xNeynarExperimental?: boolean, feedType?: FetchFeedFeedTypeEnum, filterType?: FetchFeedFilterTypeEnum, fid?: number, fids?: string, parentUrl?: string, channelId?: string, membersOnly?: boolean | null, embedUrl?: string, embedTypes?: Array<FetchFeedEmbedTypesEnum>, withRecasts?: boolean | null, limit?: number, cursor?: string, viewerFid?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FeedResponse>>;
    /**
     * Fetch feed based on channel IDs
     * @summary By channel IDs
     * @param {string} channelIds Comma separated list of up to 10 channel IDs e.g. neynar,farcaster
     * @param {boolean} [xNeynarExperimental] Enables experimental features including filtering based on the Neynar score. See [docs](https://neynar.notion.site/Experimental-Features-1d2655195a8b80eb98b4d4ae7b76ae4a) for more details.
     * @param {boolean | null} [withRecasts] Include recasts in the response, true by default
     * @param {number} [viewerFid] Providing this will return a feed that respects this user\&#39;s mutes and blocks and includes &#x60;viewer_context&#x60;.
     * @param {boolean | null} [withReplies] Include replies in the response, false by default
     * @param {boolean | null} [membersOnly] Used when filter_type&#x3D;channel_id. Only include casts from members of the channel. True by default.
     * @param {string} [fids] Comma separated list of FIDs to filter the feed by, up to 10 at a time
     * @param {number} [limit] Number of results to fetch  (Default: 25, Maximum: 100)
     * @param {string} [cursor] Pagination cursor.
     * @param {boolean | null} [shouldModerate] If true, only casts that have been liked by the moderator (if one exists) will be returned.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @returns {Promise<FeedResponse>} A promise that resolves to a `FeedResponse` object
     *
     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-feed-by-channel-ids)
     *
     */
    fetchFeedByChannelIds(channelIds: string, xNeynarExperimental?: boolean, withRecasts?: boolean | null, viewerFid?: number, withReplies?: boolean | null, membersOnly?: boolean | null, fids?: string, limit?: number, cursor?: string, shouldModerate?: boolean | null, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FeedResponse>>;
    /**
     * Fetch feed based on parent URLs
     * @summary By parent URLs
     * @param {string} parentUrls Comma separated list of parent_urls
     * @param {boolean} [xNeynarExperimental] Enables experimental features including filtering based on the Neynar score. See [docs](https://neynar.notion.site/Experimental-Features-1d2655195a8b80eb98b4d4ae7b76ae4a) for more details.
     * @param {boolean | null} [withRecasts] Include recasts in the response, true by default
     * @param {number} [viewerFid] Providing this will return a feed that respects this user\&#39;s mutes and blocks and includes &#x60;viewer_context&#x60;.
     * @param {boolean | null} [withReplies] Include replies in the response, false by default
     * @param {number} [limit] Number of results to fetch  (Default: 25, Maximum: 100)
     * @param {string} [cursor] Pagination cursor.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @returns {Promise<FeedResponse>} A promise that resolves to a `FeedResponse` object
     *
     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-feed-by-parent-urls)
     *
     */
    fetchFeedByParentUrls(parentUrls: string, xNeynarExperimental?: boolean, withRecasts?: boolean | null, viewerFid?: number, withReplies?: boolean | null, limit?: number, cursor?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FeedResponse>>;
    /**
     * Fetch a personalized For You feed for a user
     * @summary For you
     * @param {number} fid FID of user whose feed you want to create
     * @param {boolean} [xNeynarExperimental] Enables experimental features including filtering based on the Neynar score. See [docs](https://neynar.notion.site/Experimental-Features-1d2655195a8b80eb98b4d4ae7b76ae4a) for more details.
     * @param {number} [viewerFid] Providing this will return a feed that respects this user\&#39;s mutes and blocks and includes &#x60;viewer_context&#x60;.
     * @param {FetchFeedForYouProviderEnum} [provider] The provider of the For You feed.
     * @param {number} [limit] Number of results to fetch  (Default: 25, Maximum: 50)
     * @param {string} [cursor] Pagination cursor.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @returns {Promise<FeedResponse>} A promise that resolves to a `FeedResponse` object
     *
     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-feed-for-you)
     *
     */
    fetchFeedForYou(fid: number, xNeynarExperimental?: boolean, viewerFid?: number, provider?: FetchFeedForYouProviderEnum, limit?: number, cursor?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FeedResponse>>;
    /**
     * Fetch feed of casts with mini apps, reverse chronological order
     * @summary Casts with mini apps
     * @param {boolean} [xNeynarExperimental] Enables experimental features including filtering based on the Neynar score. See [docs](https://neynar.notion.site/Experimental-Features-1d2655195a8b80eb98b4d4ae7b76ae4a) for more details.
     * @param {number} [limit] Number of results to fetch  (Default: 25, Maximum: 100)
     * @param {number} [viewerFid] Providing this will return a feed that respects this user\&#39;s mutes and blocks and includes &#x60;viewer_context&#x60;.
     * @param {string} [cursor] Pagination cursor.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @returns {Promise<FeedResponse>} A promise that resolves to a `FeedResponse` object
     *
     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-frames-only-feed)
     *
     */
    fetchFramesOnlyFeed(xNeynarExperimental?: boolean, limit?: number, viewerFid?: number, cursor?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FeedResponse>>;
    /**
     * Fetch 10 most popular casts for a given user FID; popularity based on replies, likes and recasts; sorted by most popular first
     * @summary 10 most popular casts
     * @param {number} fid FID of user whose feed you want to create
     * @param {number} [viewerFid]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @returns {Promise<BulkCastsResponse>} A promise that resolves to a `BulkCastsResponse` object
     *
     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-popular-casts-by-user)
     *
     */
    fetchPopularCastsByUser(fid: number, viewerFid?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BulkCastsResponse>>;
    /**
     * Fetch recent replies and recasts for a given user FID; sorted by most recent first
     * @summary Replies and recasts
     * @param {number} fid FID of user whose replies and recasts you want to fetch
     * @param {FetchRepliesAndRecastsForUserFilterEnum} [filter] Filter to fetch only replies or recasts
     * @param {number} [limit] Number of results to fetch  (Default: 25, Maximum: 50)
     * @param {string} [cursor] Pagination cursor.
     * @param {number} [viewerFid] Providing this will return a feed that respects this user\&#39;s mutes and blocks and includes &#x60;viewer_context&#x60;.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @returns {Promise<FeedResponse>} A promise that resolves to a `FeedResponse` object
     *
     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-replies-and-recasts-for-user)
     *
     */
    fetchRepliesAndRecastsForUser(fid: number, filter?: FetchRepliesAndRecastsForUserFilterEnum, limit?: number, cursor?: string, viewerFid?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FeedResponse>>;
    /**
     * Fetch trending casts or on the global feed or channels feeds. 7d time window available for channel feeds only.
     * @summary Trending feeds
     * @param {boolean} [xNeynarExperimental] Enables experimental features including filtering based on the Neynar score. See [docs](https://neynar.notion.site/Experimental-Features-1d2655195a8b80eb98b4d4ae7b76ae4a) for more details.
     * @param {number} [limit] Number of results to fetch  (Default: 10, Maximum: 10)
     * @param {string} [cursor] Pagination cursor
     * @param {number} [viewerFid] Providing this will return a feed that respects this user\&#39;s mutes and blocks and includes &#x60;viewer_context&#x60;.
     * @param {FetchTrendingFeedTimeWindowEnum} [timeWindow] Time window for trending casts (7d window for channel feeds only)
     * @param {string} [channelId] Channel ID to filter trending casts. Less active channels might have no casts in the time window selected. Provide either &#x60;channel_id&#x60; or &#x60;parent_url&#x60;, not both.
     * @param {string} [parentUrl] Parent URL to filter trending casts. Less active channels might have no casts in the time window selected. Provide either &#x60;channel_id&#x60; or &#x60;parent_url&#x60;, not both.
     * @param {FetchTrendingFeedProviderEnum} [provider] The provider of the trending casts feed.
     * @param {string} [providerMetadata] provider_metadata is a URI-encoded stringified JSON object that can be used to pass additional metadata to the provider. Only available for mbd provider right now. See [here](https://docs.neynar.com/docs/feed-for-you-w-external-providers) on how to use.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @returns {Promise<FeedResponse>} A promise that resolves to a `FeedResponse` object
     *
     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-trending-feed)
     *
     */
    fetchTrendingFeed(xNeynarExperimental?: boolean, limit?: number, cursor?: string, viewerFid?: number, timeWindow?: FetchTrendingFeedTimeWindowEnum, channelId?: string, parentUrl?: string, provider?: FetchTrendingFeedProviderEnum, providerMetadata?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FeedResponse>>;
    /**
     * Fetch feed based on who a user is following
     * @summary Following
     * @param {number} fid FID of user whose feed you want to create
     * @param {boolean} [xNeynarExperimental] Enables experimental features including filtering based on the Neynar score. See [docs](https://neynar.notion.site/Experimental-Features-1d2655195a8b80eb98b4d4ae7b76ae4a) for more details.
     * @param {number} [viewerFid] Providing this will return a feed that respects this user\&#39;s mutes and blocks and includes &#x60;viewer_context&#x60;.
     * @param {boolean | null} [withRecasts] Include recasts in the response, true by default
     * @param {number} [limit] Number of results to fetch  (Default: 25, Maximum: 100)
     * @param {string} [cursor] Pagination cursor.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @returns {Promise<FeedResponse>} A promise that resolves to a `FeedResponse` object
     *
     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-user-following-feed)
     *
     */
    fetchUserFollowingFeed(fid: number, xNeynarExperimental?: boolean, viewerFid?: number, withRecasts?: boolean | null, limit?: number, cursor?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FeedResponse>>;
};
/**
 * FeedApi - factory interface
 * @export
 */
export declare const FeedApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * Fetch casts for a given user FID in reverse chronological order. Also allows filtering by parent_url and channel
     * @summary Chronologically
     * @param {FeedApiFetchCastsForUserRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @returns {Promise<FeedResponse>} A promise that resolves to a `FeedResponse` object
     *
     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-casts-for-user)
     *
     */
    fetchCastsForUser(requestParameters: FeedApiFetchCastsForUserRequest, options?: RawAxiosRequestConfig): AxiosPromise<FeedResponse>;
    /**
     * Fetch casts based on filters. Ensure setting the correct parameters based on the feed_type and filter_type.
     * @summary By filters
     * @param {FeedApiFetchFeedRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @returns {Promise<FeedResponse>} A promise that resolves to a `FeedResponse` object
     *
     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-feed)
     *
     */
    fetchFeed(requestParameters?: FeedApiFetchFeedRequest, options?: RawAxiosRequestConfig): AxiosPromise<FeedResponse>;
    /**
     * Fetch feed based on channel IDs
     * @summary By channel IDs
     * @param {FeedApiFetchFeedByChannelIdsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @returns {Promise<FeedResponse>} A promise that resolves to a `FeedResponse` object
     *
     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-feed-by-channel-ids)
     *
     */
    fetchFeedByChannelIds(requestParameters: FeedApiFetchFeedByChannelIdsRequest, options?: RawAxiosRequestConfig): AxiosPromise<FeedResponse>;
    /**
     * Fetch feed based on parent URLs
     * @summary By parent URLs
     * @param {FeedApiFetchFeedByParentUrlsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @returns {Promise<FeedResponse>} A promise that resolves to a `FeedResponse` object
     *
     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-feed-by-parent-urls)
     *
     */
    fetchFeedByParentUrls(requestParameters: FeedApiFetchFeedByParentUrlsRequest, options?: RawAxiosRequestConfig): AxiosPromise<FeedResponse>;
    /**
     * Fetch a personalized For You feed for a user
     * @summary For you
     * @param {FeedApiFetchFeedForYouRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @returns {Promise<FeedResponse>} A promise that resolves to a `FeedResponse` object
     *
     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-feed-for-you)
     *
     */
    fetchFeedForYou(requestParameters: FeedApiFetchFeedForYouRequest, options?: RawAxiosRequestConfig): AxiosPromise<FeedResponse>;
    /**
     * Fetch feed of casts with mini apps, reverse chronological order
     * @summary Casts with mini apps
     * @param {FeedApiFetchFramesOnlyFeedRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @returns {Promise<FeedResponse>} A promise that resolves to a `FeedResponse` object
     *
     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-frames-only-feed)
     *
     */
    fetchFramesOnlyFeed(requestParameters?: FeedApiFetchFramesOnlyFeedRequest, options?: RawAxiosRequestConfig): AxiosPromise<FeedResponse>;
    /**
     * Fetch 10 most popular casts for a given user FID; popularity based on replies, likes and recasts; sorted by most popular first
     * @summary 10 most popular casts
     * @param {FeedApiFetchPopularCastsByUserRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @returns {Promise<BulkCastsResponse>} A promise that resolves to a `BulkCastsResponse` object
     *
     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-popular-casts-by-user)
     *
     */
    fetchPopularCastsByUser(requestParameters: FeedApiFetchPopularCastsByUserRequest, options?: RawAxiosRequestConfig): AxiosPromise<BulkCastsResponse>;
    /**
     * Fetch recent replies and recasts for a given user FID; sorted by most recent first
     * @summary Replies and recasts
     * @param {FeedApiFetchRepliesAndRecastsForUserRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @returns {Promise<FeedResponse>} A promise that resolves to a `FeedResponse` object
     *
     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-replies-and-recasts-for-user)
     *
     */
    fetchRepliesAndRecastsForUser(requestParameters: FeedApiFetchRepliesAndRecastsForUserRequest, options?: RawAxiosRequestConfig): AxiosPromise<FeedResponse>;
    /**
     * Fetch trending casts or on the global feed or channels feeds. 7d time window available for channel feeds only.
     * @summary Trending feeds
     * @param {FeedApiFetchTrendingFeedRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @returns {Promise<FeedResponse>} A promise that resolves to a `FeedResponse` object
     *
     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-trending-feed)
     *
     */
    fetchTrendingFeed(requestParameters?: FeedApiFetchTrendingFeedRequest, options?: RawAxiosRequestConfig): AxiosPromise<FeedResponse>;
    /**
     * Fetch feed based on who a user is following
     * @summary Following
     * @param {FeedApiFetchUserFollowingFeedRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @returns {Promise<FeedResponse>} A promise that resolves to a `FeedResponse` object
     *
     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-user-following-feed)
     *
     */
    fetchUserFollowingFeed(requestParameters: FeedApiFetchUserFollowingFeedRequest, options?: RawAxiosRequestConfig): AxiosPromise<FeedResponse>;
};
/**
 * FeedApi - interface
 * @export
 * @interface FeedApi
 */
export interface FeedApiInterface {
    /**
     * Fetch casts for a given user FID in reverse chronological order. Also allows filtering by parent_url and channel
     * @summary Chronologically
     * @param {FeedApiFetchCastsForUserRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FeedApiInterface
     * @returns {Promise<FeedResponse>} A promise that resolves to a `FeedResponse` object
     *
     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-casts-for-user)
     *
     */
    fetchCastsForUser(requestParameters: FeedApiFetchCastsForUserRequest, options?: RawAxiosRequestConfig): AxiosPromise<FeedResponse>;
    /**
     * Fetch casts based on filters. Ensure setting the correct parameters based on the feed_type and filter_type.
     * @summary By filters
     * @param {FeedApiFetchFeedRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FeedApiInterface
     * @returns {Promise<FeedResponse>} A promise that resolves to a `FeedResponse` object
     *
     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-feed)
     *
     */
    fetchFeed(requestParameters?: FeedApiFetchFeedRequest, options?: RawAxiosRequestConfig): AxiosPromise<FeedResponse>;
    /**
     * Fetch feed based on channel IDs
     * @summary By channel IDs
     * @param {FeedApiFetchFeedByChannelIdsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FeedApiInterface
     * @returns {Promise<FeedResponse>} A promise that resolves to a `FeedResponse` object
     *
     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-feed-by-channel-ids)
     *
     */
    fetchFeedByChannelIds(requestParameters: FeedApiFetchFeedByChannelIdsRequest, options?: RawAxiosRequestConfig): AxiosPromise<FeedResponse>;
    /**
     * Fetch feed based on parent URLs
     * @summary By parent URLs
     * @param {FeedApiFetchFeedByParentUrlsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FeedApiInterface
     * @returns {Promise<FeedResponse>} A promise that resolves to a `FeedResponse` object
     *
     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-feed-by-parent-urls)
     *
     */
    fetchFeedByParentUrls(requestParameters: FeedApiFetchFeedByParentUrlsRequest, options?: RawAxiosRequestConfig): AxiosPromise<FeedResponse>;
    /**
     * Fetch a personalized For You feed for a user
     * @summary For you
     * @param {FeedApiFetchFeedForYouRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FeedApiInterface
     * @returns {Promise<FeedResponse>} A promise that resolves to a `FeedResponse` object
     *
     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-feed-for-you)
     *
     */
    fetchFeedForYou(requestParameters: FeedApiFetchFeedForYouRequest, options?: RawAxiosRequestConfig): AxiosPromise<FeedResponse>;
    /**
     * Fetch feed of casts with mini apps, reverse chronological order
     * @summary Casts with mini apps
     * @param {FeedApiFetchFramesOnlyFeedRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FeedApiInterface
     * @returns {Promise<FeedResponse>} A promise that resolves to a `FeedResponse` object
     *
     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-frames-only-feed)
     *
     */
    fetchFramesOnlyFeed(requestParameters?: FeedApiFetchFramesOnlyFeedRequest, options?: RawAxiosRequestConfig): AxiosPromise<FeedResponse>;
    /**
     * Fetch 10 most popular casts for a given user FID; popularity based on replies, likes and recasts; sorted by most popular first
     * @summary 10 most popular casts
     * @param {FeedApiFetchPopularCastsByUserRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FeedApiInterface
     * @returns {Promise<BulkCastsResponse>} A promise that resolves to a `BulkCastsResponse` object
     *
     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-popular-casts-by-user)
     *
     */
    fetchPopularCastsByUser(requestParameters: FeedApiFetchPopularCastsByUserRequest, options?: RawAxiosRequestConfig): AxiosPromise<BulkCastsResponse>;
    /**
     * Fetch recent replies and recasts for a given user FID; sorted by most recent first
     * @summary Replies and recasts
     * @param {FeedApiFetchRepliesAndRecastsForUserRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FeedApiInterface
     * @returns {Promise<FeedResponse>} A promise that resolves to a `FeedResponse` object
     *
     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-replies-and-recasts-for-user)
     *
     */
    fetchRepliesAndRecastsForUser(requestParameters: FeedApiFetchRepliesAndRecastsForUserRequest, options?: RawAxiosRequestConfig): AxiosPromise<FeedResponse>;
    /**
     * Fetch trending casts or on the global feed or channels feeds. 7d time window available for channel feeds only.
     * @summary Trending feeds
     * @param {FeedApiFetchTrendingFeedRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FeedApiInterface
     * @returns {Promise<FeedResponse>} A promise that resolves to a `FeedResponse` object
     *
     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-trending-feed)
     *
     */
    fetchTrendingFeed(requestParameters?: FeedApiFetchTrendingFeedRequest, options?: RawAxiosRequestConfig): AxiosPromise<FeedResponse>;
    /**
     * Fetch feed based on who a user is following
     * @summary Following
     * @param {FeedApiFetchUserFollowingFeedRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FeedApiInterface
     * @returns {Promise<FeedResponse>} A promise that resolves to a `FeedResponse` object
     *
     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-user-following-feed)
     *
     */
    fetchUserFollowingFeed(requestParameters: FeedApiFetchUserFollowingFeedRequest, options?: RawAxiosRequestConfig): AxiosPromise<FeedResponse>;
}
/**
 * Request parameters for fetchCastsForUser operation in FeedApi.
 * @export
 * @interface FeedApiFetchCastsForUserRequest
 */
export interface FeedApiFetchCastsForUserRequest {
    /**
     * FID of user whose recent casts you want to fetch
     *
     *
     *
     * @type {number}
     * @memberof FeedApiFetchCastsForUser
     */
    readonly fid: number;
    /**
     * Enables experimental features including filtering based on the Neynar score. See [docs](https://neynar.notion.site/Experimental-Features-1d2655195a8b80eb98b4d4ae7b76ae4a) for more details.
     *
     *
     * @globalHeader
     * @type {boolean}
     * @memberof FeedApiFetchCastsForUser
     */
    readonly xNeynarExperimental?: boolean;
    /**
     * Optionally filter to casts created via a specific app FID, e.g. 9152 for Warpcast
     *
     *
     *
     * @type {number}
     * @memberof FeedApiFetchCastsForUser
     */
    readonly appFid?: number;
    /**
     * FID of the user viewing the feed
     *
     *
     *
     * @type {number}
     * @memberof FeedApiFetchCastsForUser
     */
    readonly viewerFid?: number;
    /**
     * Number of results to fetch (Default: 25, Maximum: 150)
     *
     *
     *
     * @type {number}
     * @memberof FeedApiFetchCastsForUser
     */
    readonly limit?: number;
    /**
     * Pagination cursor
     *
     *
     *
     * @type {string}
     * @memberof FeedApiFetchCastsForUser
     */
    readonly cursor?: string;
    /**
     * Include reply casts by the author in the response, true by default
     *
     *
     *
     * @type {boolean}
     * @memberof FeedApiFetchCastsForUser
     */
    readonly includeReplies?: boolean | null;
    /**
     * Parent URL to filter the feed; mutually exclusive with channel_id
     *
     *
     *
     * @type {string}
     * @memberof FeedApiFetchCastsForUser
     */
    readonly parentUrl?: string;
    /**
     * Channel ID to filter the feed; mutually exclusive with parent_url
     *
     *
     *
     * @type {string}
     * @memberof FeedApiFetchCastsForUser
     */
    readonly channelId?: string;
}
/**
 * Request parameters for fetchFeed operation in FeedApi.
 * @export
 * @interface FeedApiFetchFeedRequest
 */
export interface FeedApiFetchFeedRequest {
    /**
     * Enables experimental features including filtering based on the Neynar score. See [docs](https://neynar.notion.site/Experimental-Features-1d2655195a8b80eb98b4d4ae7b76ae4a) for more details.
     *
     *
     * @globalHeader
     * @type {boolean}
     * @memberof FeedApiFetchFeed
     */
    readonly xNeynarExperimental?: boolean;
    /**
     * Defaults to following (requires FID or address). If set to filter (requires filter_type)
     *
     *
     *
     * @type {'following' | 'filter'}
     * @memberof FeedApiFetchFeed
     */
    readonly feedType?: FetchFeedFeedTypeEnum;
    /**
     * Used when feed_type&#x3D;filter. Can be set to FIDs (requires FIDs) or parent_url (requires parent_url) or channel_id (requires channel_id)
     *
     *
     *
     * @type {'fids' | 'parent_url' | 'channel_id' | 'embed_url' | 'embed_types' | 'global_trending'}
     * @memberof FeedApiFetchFeed
     */
    readonly filterType?: FetchFeedFilterTypeEnum;
    /**
     * (Optional) FID of user whose feed you want to create. By default, the API expects this field, except if you pass a filter_type
     *
     *
     *
     * @type {number}
     * @memberof FeedApiFetchFeed
     */
    readonly fid?: number;
    /**
     * Used when filter_type&#x3D;FIDs . Create a feed based on a list of FIDs. Max array size is 100. Requires feed_type and filter_type.
     * @acceptAs integer
     * @commaSeparated
     *
     * @type {string}
     * @memberof FeedApiFetchFeed
     */
    readonly fids?: string;
    /**
     * Used when filter_type&#x3D;parent_url can be used to fetch content under any parent url e.g. FIP-2 channels on Warpcast. Requires feed_type and filter_type.
     *
     *
     *
     * @type {string}
     * @memberof FeedApiFetchFeed
     */
    readonly parentUrl?: string;
    /**
     * Used when filter_type&#x3D;channel_id can be used to fetch casts under a channel. Requires feed_type and filter_type.
     *
     *
     *
     * @type {string}
     * @memberof FeedApiFetchFeed
     */
    readonly channelId?: string;
    /**
     * Used when filter_type&#x3D;channel_id. Only include casts from members of the channel. True by default.
     *
     *
     *
     * @type {boolean}
     * @memberof FeedApiFetchFeed
     */
    readonly membersOnly?: boolean | null;
    /**
     * Used when filter_type&#x3D;embed_url. Casts with embedded URLs prefixed by this embed_url param will be returned. We normalize your given URL prefix and prepend \&#39;https://\&#39; if no protocol is included. Requires feed_type and filter_type.
     *
     *
     *
     * @type {string}
     * @memberof FeedApiFetchFeed
     */
    readonly embedUrl?: string;
    /**
     * Used when filter_type&#x3D;embed_types can be used to fetch all casts with matching content types. Requires feed_type and filter_type.
     *
     *
     *
     * @type {Array<'text' | 'image' | 'video' | 'audio' | 'text/html' | 'text/plain' | 'image/jpeg' | 'image/png' | 'image/gif' | 'image/webp' | 'image/svg+xml' | 'image/heif' | 'video/mp4' | 'video/quicktime' | 'audio/mpeg' | 'application/pdf' | 'application/json' | 'application/x-mpegurl'>}
     * @memberof FeedApiFetchFeed
     */
    readonly embedTypes?: Array<FetchFeedEmbedTypesEnum>;
    /**
     * Include recasts in the response, true by default
     *
     *
     *
     * @type {boolean}
     * @memberof FeedApiFetchFeed
     */
    readonly withRecasts?: boolean | null;
    /**
     * Number of results to fetch (Default: 25, Maximum: 100)
     *
     *
     *
     * @type {number}
     * @memberof FeedApiFetchFeed
     */
    readonly limit?: number;
    /**
     * Pagination cursor.
     *
     *
     *
     * @type {string}
     * @memberof FeedApiFetchFeed
     */
    readonly cursor?: string;
    /**
     * Providing this will return a feed that respects this user\&#39;s mutes and blocks and includes &#x60;viewer_context&#x60;.
     *
     *
     *
     * @type {number}
     * @memberof FeedApiFetchFeed
     */
    readonly viewerFid?: number;
}
/**
 * Request parameters for fetchFeedByChannelIds operation in FeedApi.
 * @export
 * @interface FeedApiFetchFeedByChannelIdsRequest
 */
export interface FeedApiFetchFeedByChannelIdsRequest {
    /**
     * Comma separated list of up to 10 channel IDs e.g. neynar,farcaster
     *
     * @commaSeparated
     *
     * @type {string}
     * @memberof FeedApiFetchFeedByChannelIds
     */
    readonly channelIds: string;
    /**
     * Enables experimental features including filtering based on the Neynar score. See [docs](https://neynar.notion.site/Experimental-Features-1d2655195a8b80eb98b4d4ae7b76ae4a) for more details.
     *
     *
     * @globalHeader
     * @type {boolean}
     * @memberof FeedApiFetchFeedByChannelIds
     */
    readonly xNeynarExperimental?: boolean;
    /**
     * Include recasts in the response, true by default
     *
     *
     *
     * @type {boolean}
     * @memberof FeedApiFetchFeedByChannelIds
     */
    readonly withRecasts?: boolean | null;
    /**
     * Providing this will return a feed that respects this user\&#39;s mutes and blocks and includes &#x60;viewer_context&#x60;.
     *
     *
     *
     * @type {number}
     * @memberof FeedApiFetchFeedByChannelIds
     */
    readonly viewerFid?: number;
    /**
     * Include replies in the response, false by default
     *
     *
     *
     * @type {boolean}
     * @memberof FeedApiFetchFeedByChannelIds
     */
    readonly withReplies?: boolean | null;
    /**
     * Used when filter_type&#x3D;channel_id. Only include casts from members of the channel. True by default.
     *
     *
     *
     * @type {boolean}
     * @memberof FeedApiFetchFeedByChannelIds
     */
    readonly membersOnly?: boolean | null;
    /**
     * Comma separated list of FIDs to filter the feed by, up to 10 at a time
     * @acceptAs integer
     * @commaSeparated
     *
     * @type {string}
     * @memberof FeedApiFetchFeedByChannelIds
     */
    readonly fids?: string;
    /**
     * Number of results to fetch (Default: 25, Maximum: 100)
     *
     *
     *
     * @type {number}
     * @memberof FeedApiFetchFeedByChannelIds
     */
    readonly limit?: number;
    /**
     * Pagination cursor.
     *
     *
     *
     * @type {string}
     * @memberof FeedApiFetchFeedByChannelIds
     */
    readonly cursor?: string;
    /**
     * If true, only casts that have been liked by the moderator (if one exists) will be returned.
     *
     *
     *
     * @type {boolean}
     * @memberof FeedApiFetchFeedByChannelIds
     */
    readonly shouldModerate?: boolean | null;
}
/**
 * Request parameters for fetchFeedByParentUrls operation in FeedApi.
 * @export
 * @interface FeedApiFetchFeedByParentUrlsRequest
 */
export interface FeedApiFetchFeedByParentUrlsRequest {
    /**
     * Comma separated list of parent_urls
     *
     * @commaSeparated
     *
     * @type {string}
     * @memberof FeedApiFetchFeedByParentUrls
     */
    readonly parentUrls: string;
    /**
     * Enables experimental features including filtering based on the Neynar score. See [docs](https://neynar.notion.site/Experimental-Features-1d2655195a8b80eb98b4d4ae7b76ae4a) for more details.
     *
     *
     * @globalHeader
     * @type {boolean}
     * @memberof FeedApiFetchFeedByParentUrls
     */
    readonly xNeynarExperimental?: boolean;
    /**
     * Include recasts in the response, true by default
     *
     *
     *
     * @type {boolean}
     * @memberof FeedApiFetchFeedByParentUrls
     */
    readonly withRecasts?: boolean | null;
    /**
     * Providing this will return a feed that respects this user\&#39;s mutes and blocks and includes &#x60;viewer_context&#x60;.
     *
     *
     *
     * @type {number}
     * @memberof FeedApiFetchFeedByParentUrls
     */
    readonly viewerFid?: number;
    /**
     * Include replies in the response, false by default
     *
     *
     *
     * @type {boolean}
     * @memberof FeedApiFetchFeedByParentUrls
     */
    readonly withReplies?: boolean | null;
    /**
     * Number of results to fetch (Default: 25, Maximum: 100)
     *
     *
     *
     * @type {number}
     * @memberof FeedApiFetchFeedByParentUrls
     */
    readonly limit?: number;
    /**
     * Pagination cursor.
     *
     *
     *
     * @type {string}
     * @memberof FeedApiFetchFeedByParentUrls
     */
    readonly cursor?: string;
}
/**
 * Request parameters for fetchFeedForYou operation in FeedApi.
 * @export
 * @interface FeedApiFetchFeedForYouRequest
 */
export interface FeedApiFetchFeedForYouRequest {
    /**
     * FID of user whose feed you want to create
     *
     *
     *
     * @type {number}
     * @memberof FeedApiFetchFeedForYou
     */
    readonly fid: number;
    /**
     * Enables experimental features including filtering based on the Neynar score. See [docs](https://neynar.notion.site/Experimental-Features-1d2655195a8b80eb98b4d4ae7b76ae4a) for more details.
     *
     *
     * @globalHeader
     * @type {boolean}
     * @memberof FeedApiFetchFeedForYou
     */
    readonly xNeynarExperimental?: boolean;
    /**
     * Providing this will return a feed that respects this user\&#39;s mutes and blocks and includes &#x60;viewer_context&#x60;.
     *
     *
     *
     * @type {number}
     * @memberof FeedApiFetchFeedForYou
     */
    readonly viewerFid?: number;
    /**
     * The provider of the For You feed.
     *
     *
     *
     * @type {'neynar'}
     * @memberof FeedApiFetchFeedForYou
     */
    readonly provider?: FetchFeedForYouProviderEnum;
    /**
     * Number of results to fetch (Default: 25, Maximum: 50)
     *
     *
     *
     * @type {number}
     * @memberof FeedApiFetchFeedForYou
     */
    readonly limit?: number;
    /**
     * Pagination cursor.
     *
     *
     *
     * @type {string}
     * @memberof FeedApiFetchFeedForYou
     */
    readonly cursor?: string;
}
/**
 * Request parameters for fetchFramesOnlyFeed operation in FeedApi.
 * @export
 * @interface FeedApiFetchFramesOnlyFeedRequest
 */
export interface FeedApiFetchFramesOnlyFeedRequest {
    /**
     * Enables experimental features including filtering based on the Neynar score. See [docs](https://neynar.notion.site/Experimental-Features-1d2655195a8b80eb98b4d4ae7b76ae4a) for more details.
     *
     *
     * @globalHeader
     * @type {boolean}
     * @memberof FeedApiFetchFramesOnlyFeed
     */
    readonly xNeynarExperimental?: boolean;
    /**
     * Number of results to fetch (Default: 25, Maximum: 100)
     *
     *
     *
     * @type {number}
     * @memberof FeedApiFetchFramesOnlyFeed
     */
    readonly limit?: number;
    /**
     * Providing this will return a feed that respects this user\&#39;s mutes and blocks and includes &#x60;viewer_context&#x60;.
     *
     *
     *
     * @type {number}
     * @memberof FeedApiFetchFramesOnlyFeed
     */
    readonly viewerFid?: number;
    /**
     * Pagination cursor.
     *
     *
     *
     * @type {string}
     * @memberof FeedApiFetchFramesOnlyFeed
     */
    readonly cursor?: string;
}
/**
 * Request parameters for fetchPopularCastsByUser operation in FeedApi.
 * @export
 * @interface FeedApiFetchPopularCastsByUserRequest
 */
export interface FeedApiFetchPopularCastsByUserRequest {
    /**
     * FID of user whose feed you want to create
     *
     *
     *
     * @type {number}
     * @memberof FeedApiFetchPopularCastsByUser
     */
    readonly fid: number;
    /**
     *
     *
     *
     *
     * @type {number}
     * @memberof FeedApiFetchPopularCastsByUser
     */
    readonly viewerFid?: number;
}
/**
 * Request parameters for fetchRepliesAndRecastsForUser operation in FeedApi.
 * @export
 * @interface FeedApiFetchRepliesAndRecastsForUserRequest
 */
export interface FeedApiFetchRepliesAndRecastsForUserRequest {
    /**
     * FID of user whose replies and recasts you want to fetch
     *
     *
     *
     * @type {number}
     * @memberof FeedApiFetchRepliesAndRecastsForUser
     */
    readonly fid: number;
    /**
     * Filter to fetch only replies or recasts
     *
     *
     *
     * @type {'replies' | 'recasts' | 'all'}
     * @memberof FeedApiFetchRepliesAndRecastsForUser
     */
    readonly filter?: FetchRepliesAndRecastsForUserFilterEnum;
    /**
     * Number of results to fetch (Default: 25, Maximum: 50)
     *
     *
     *
     * @type {number}
     * @memberof FeedApiFetchRepliesAndRecastsForUser
     */
    readonly limit?: number;
    /**
     * Pagination cursor.
     *
     *
     *
     * @type {string}
     * @memberof FeedApiFetchRepliesAndRecastsForUser
     */
    readonly cursor?: string;
    /**
     * Providing this will return a feed that respects this user\&#39;s mutes and blocks and includes &#x60;viewer_context&#x60;.
     *
     *
     *
     * @type {number}
     * @memberof FeedApiFetchRepliesAndRecastsForUser
     */
    readonly viewerFid?: number;
}
/**
 * Request parameters for fetchTrendingFeed operation in FeedApi.
 * @export
 * @interface FeedApiFetchTrendingFeedRequest
 */
export interface FeedApiFetchTrendingFeedRequest {
    /**
     * Enables experimental features including filtering based on the Neynar score. See [docs](https://neynar.notion.site/Experimental-Features-1d2655195a8b80eb98b4d4ae7b76ae4a) for more details.
     *
     *
     * @globalHeader
     * @type {boolean}
     * @memberof FeedApiFetchTrendingFeed
     */
    readonly xNeynarExperimental?: boolean;
    /**
     * Number of results to fetch (Default: 10, Maximum: 10)
     *
     *
     *
     * @type {number}
     * @memberof FeedApiFetchTrendingFeed
     */
    readonly limit?: number;
    /**
     * Pagination cursor
     *
     *
     *
     * @type {string}
     * @memberof FeedApiFetchTrendingFeed
     */
    readonly cursor?: string;
    /**
     * Providing this will return a feed that respects this user\&#39;s mutes and blocks and includes &#x60;viewer_context&#x60;.
     *
     *
     *
     * @type {number}
     * @memberof FeedApiFetchTrendingFeed
     */
    readonly viewerFid?: number;
    /**
     * Time window for trending casts (7d window for channel feeds only)
     *
     *
     *
     * @type {'1h' | '6h' | '12h' | '24h' | '7d'}
     * @memberof FeedApiFetchTrendingFeed
     */
    readonly timeWindow?: FetchTrendingFeedTimeWindowEnum;
    /**
     * Channel ID to filter trending casts. Less active channels might have no casts in the time window selected. Provide either &#x60;channel_id&#x60; or &#x60;parent_url&#x60;, not both.
     *
     *
     *
     * @type {string}
     * @memberof FeedApiFetchTrendingFeed
     */
    readonly channelId?: string;
    /**
     * Parent URL to filter trending casts. Less active channels might have no casts in the time window selected. Provide either &#x60;channel_id&#x60; or &#x60;parent_url&#x60;, not both.
     *
     *
     *
     * @type {string}
     * @memberof FeedApiFetchTrendingFeed
     */
    readonly parentUrl?: string;
    /**
     * The provider of the trending casts feed.
     *
     *
     *
     * @type {'neynar' | 'openrank' | 'mbd'}
     * @memberof FeedApiFetchTrendingFeed
     */
    readonly provider?: FetchTrendingFeedProviderEnum;
    /**
     * provider_metadata is a URI-encoded stringified JSON object that can be used to pass additional metadata to the provider. Only available for mbd provider right now. See [here](https://docs.neynar.com/docs/feed-for-you-w-external-providers) on how to use.
     *
     *
     *
     * @type {string}
     * @memberof FeedApiFetchTrendingFeed
     */
    readonly providerMetadata?: string;
}
/**
 * Request parameters for fetchUserFollowingFeed operation in FeedApi.
 * @export
 * @interface FeedApiFetchUserFollowingFeedRequest
 */
export interface FeedApiFetchUserFollowingFeedRequest {
    /**
     * FID of user whose feed you want to create
     *
     *
     *
     * @type {number}
     * @memberof FeedApiFetchUserFollowingFeed
     */
    readonly fid: number;
    /**
     * Enables experimental features including filtering based on the Neynar score. See [docs](https://neynar.notion.site/Experimental-Features-1d2655195a8b80eb98b4d4ae7b76ae4a) for more details.
     *
     *
     * @globalHeader
     * @type {boolean}
     * @memberof FeedApiFetchUserFollowingFeed
     */
    readonly xNeynarExperimental?: boolean;
    /**
     * Providing this will return a feed that respects this user\&#39;s mutes and blocks and includes &#x60;viewer_context&#x60;.
     *
     *
     *
     * @type {number}
     * @memberof FeedApiFetchUserFollowingFeed
     */
    readonly viewerFid?: number;
    /**
     * Include recasts in the response, true by default
     *
     *
     *
     * @type {boolean}
     * @memberof FeedApiFetchUserFollowingFeed
     */
    readonly withRecasts?: boolean | null;
    /**
     * Number of results to fetch (Default: 25, Maximum: 100)
     *
     *
     *
     * @type {number}
     * @memberof FeedApiFetchUserFollowingFeed
     */
    readonly limit?: number;
    /**
     * Pagination cursor.
     *
     *
     *
     * @type {string}
     * @memberof FeedApiFetchUserFollowingFeed
     */
    readonly cursor?: string;
}
/**
 * FeedApi - object-oriented interface
 * @export
 * @class FeedApi
 * @extends {BaseAPI}
 */
export declare class FeedApi extends BaseAPI implements FeedApiInterface {
    /**
     * Fetch casts for a given user FID in reverse chronological order. Also allows filtering by parent_url and channel
     * @summary Chronologically
     * @param {FeedApiFetchCastsForUserRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FeedApi
     * @returns {Promise<FeedResponse>} A promise that resolves to a `FeedResponse` object
     *
     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-casts-for-user)
     *
     */
    fetchCastsForUser(requestParameters: FeedApiFetchCastsForUserRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<FeedResponse, any>>;
    /**
     * Fetch casts based on filters. Ensure setting the correct parameters based on the feed_type and filter_type.
     * @summary By filters
     * @param {FeedApiFetchFeedRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FeedApi
     * @returns {Promise<FeedResponse>} A promise that resolves to a `FeedResponse` object
     *
     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-feed)
     *
     */
    fetchFeed(requestParameters?: FeedApiFetchFeedRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<FeedResponse, any>>;
    /**
     * Fetch feed based on channel IDs
     * @summary By channel IDs
     * @param {FeedApiFetchFeedByChannelIdsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FeedApi
     * @returns {Promise<FeedResponse>} A promise that resolves to a `FeedResponse` object
     *
     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-feed-by-channel-ids)
     *
     */
    fetchFeedByChannelIds(requestParameters: FeedApiFetchFeedByChannelIdsRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<FeedResponse, any>>;
    /**
     * Fetch feed based on parent URLs
     * @summary By parent URLs
     * @param {FeedApiFetchFeedByParentUrlsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FeedApi
     * @returns {Promise<FeedResponse>} A promise that resolves to a `FeedResponse` object
     *
     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-feed-by-parent-urls)
     *
     */
    fetchFeedByParentUrls(requestParameters: FeedApiFetchFeedByParentUrlsRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<FeedResponse, any>>;
    /**
     * Fetch a personalized For You feed for a user
     * @summary For you
     * @param {FeedApiFetchFeedForYouRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FeedApi
     * @returns {Promise<FeedResponse>} A promise that resolves to a `FeedResponse` object
     *
     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-feed-for-you)
     *
     */
    fetchFeedForYou(requestParameters: FeedApiFetchFeedForYouRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<FeedResponse, any>>;
    /**
     * Fetch feed of casts with mini apps, reverse chronological order
     * @summary Casts with mini apps
     * @param {FeedApiFetchFramesOnlyFeedRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FeedApi
     * @returns {Promise<FeedResponse>} A promise that resolves to a `FeedResponse` object
     *
     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-frames-only-feed)
     *
     */
    fetchFramesOnlyFeed(requestParameters?: FeedApiFetchFramesOnlyFeedRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<FeedResponse, any>>;
    /**
     * Fetch 10 most popular casts for a given user FID; popularity based on replies, likes and recasts; sorted by most popular first
     * @summary 10 most popular casts
     * @param {FeedApiFetchPopularCastsByUserRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FeedApi
     * @returns {Promise<BulkCastsResponse>} A promise that resolves to a `BulkCastsResponse` object
     *
     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-popular-casts-by-user)
     *
     */
    fetchPopularCastsByUser(requestParameters: FeedApiFetchPopularCastsByUserRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<BulkCastsResponse, any>>;
    /**
     * Fetch recent replies and recasts for a given user FID; sorted by most recent first
     * @summary Replies and recasts
     * @param {FeedApiFetchRepliesAndRecastsForUserRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FeedApi
     * @returns {Promise<FeedResponse>} A promise that resolves to a `FeedResponse` object
     *
     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-replies-and-recasts-for-user)
     *
     */
    fetchRepliesAndRecastsForUser(requestParameters: FeedApiFetchRepliesAndRecastsForUserRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<FeedResponse, any>>;
    /**
     * Fetch trending casts or on the global feed or channels feeds. 7d time window available for channel feeds only.
     * @summary Trending feeds
     * @param {FeedApiFetchTrendingFeedRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FeedApi
     * @returns {Promise<FeedResponse>} A promise that resolves to a `FeedResponse` object
     *
     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-trending-feed)
     *
     */
    fetchTrendingFeed(requestParameters?: FeedApiFetchTrendingFeedRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<FeedResponse, any>>;
    /**
     * Fetch feed based on who a user is following
     * @summary Following
     * @param {FeedApiFetchUserFollowingFeedRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FeedApi
     * @returns {Promise<FeedResponse>} A promise that resolves to a `FeedResponse` object
     *
     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-user-following-feed)
     *
     */
    fetchUserFollowingFeed(requestParameters: FeedApiFetchUserFollowingFeedRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<FeedResponse, any>>;
}
/**
 * @export
 */
export declare const FetchFeedFeedTypeEnum: {
    readonly Following: "following";
    readonly Filter: "filter";
};
export type FetchFeedFeedTypeEnum = typeof FetchFeedFeedTypeEnum[keyof typeof FetchFeedFeedTypeEnum];
/**
 * @export
 */
export declare const FetchFeedFilterTypeEnum: {
    readonly Fids: "fids";
    readonly ParentUrl: "parent_url";
    readonly ChannelId: "channel_id";
    readonly EmbedUrl: "embed_url";
    readonly EmbedTypes: "embed_types";
    readonly GlobalTrending: "global_trending";
};
export type FetchFeedFilterTypeEnum = typeof FetchFeedFilterTypeEnum[keyof typeof FetchFeedFilterTypeEnum];
/**
 * @export
 */
export declare const FetchFeedEmbedTypesEnum: {
    readonly Text: "text";
    readonly Image: "image";
    readonly Video: "video";
    readonly Audio: "audio";
    readonly TextHtml: "text/html";
    readonly TextPlain: "text/plain";
    readonly ImageJpeg: "image/jpeg";
    readonly ImagePng: "image/png";
    readonly ImageGif: "image/gif";
    readonly ImageWebp: "image/webp";
    readonly ImageSvgxml: "image/svg+xml";
    readonly ImageHeif: "image/heif";
    readonly VideoMp4: "video/mp4";
    readonly VideoQuicktime: "video/quicktime";
    readonly AudioMpeg: "audio/mpeg";
    readonly ApplicationPdf: "application/pdf";
    readonly ApplicationJson: "application/json";
    readonly ApplicationXMpegurl: "application/x-mpegurl";
};
export type FetchFeedEmbedTypesEnum = typeof FetchFeedEmbedTypesEnum[keyof typeof FetchFeedEmbedTypesEnum];
/**
 * @export
 */
export declare const FetchFeedForYouProviderEnum: {
    readonly Neynar: "neynar";
};
export type FetchFeedForYouProviderEnum = typeof FetchFeedForYouProviderEnum[keyof typeof FetchFeedForYouProviderEnum];
/**
 * @export
 */
export declare const FetchRepliesAndRecastsForUserFilterEnum: {
    readonly Replies: "replies";
    readonly Recasts: "recasts";
    readonly All: "all";
};
export type FetchRepliesAndRecastsForUserFilterEnum = typeof FetchRepliesAndRecastsForUserFilterEnum[keyof typeof FetchRepliesAndRecastsForUserFilterEnum];
/**
 * @export
 */
export declare const FetchTrendingFeedTimeWindowEnum: {
    readonly _1h: "1h";
    readonly _6h: "6h";
    readonly _12h: "12h";
    readonly _24h: "24h";
    readonly _7d: "7d";
};
export type FetchTrendingFeedTimeWindowEnum = typeof FetchTrendingFeedTimeWindowEnum[keyof typeof FetchTrendingFeedTimeWindowEnum];
/**
 * @export
 */
export declare const FetchTrendingFeedProviderEnum: {
    readonly Neynar: "neynar";
    readonly Openrank: "openrank";
    readonly Mbd: "mbd";
};
export type FetchTrendingFeedProviderEnum = typeof FetchTrendingFeedProviderEnum[keyof typeof FetchTrendingFeedProviderEnum];
