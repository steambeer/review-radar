"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * Neynar API
 * The Neynar API allows you to interact with the Farcaster protocol among other things. See the [Neynar docs](https://docs.neynar.com/reference) for more details.
 *
 * The version of the OpenAPI document: 3.26.0
 * Contact: team@neynar.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ActionApi = exports.ActionApiFactory = exports.ActionApiFp = exports.ActionApiAxiosParamCreator = void 0;
const axios_1 = __importDefault(require("axios"));
// Some imports not used depending on template conditions
// @ts-ignore
const common_1 = require("../common");
// @ts-ignore
const base_1 = require("../base");
/**
 * ActionApi - axios parameter creator
 * @export
 */
const ActionApiAxiosParamCreator = function (configuration) {
    return {
        /**
         * Securely communicate and perform actions on behalf of users across different apps. It enables an app to send data or trigger actions in another app on behalf of a mutual user by signing messages using the user\'s Farcaster signer.
         * @summary User actions across apps
         * @param {FarcasterActionReqBody} farcasterActionReqBody
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         * @returns {Promise<{ [key: string]: any; }>} A promise that resolves to a `{ [key: string]: any; }` object
         *
         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/publish-farcaster-action)
         *
         */
        publishFarcasterAction: async (farcasterActionReqBody, options = {}) => {
            // verify required parameter 'farcasterActionReqBody' is not null or undefined
            (0, common_1.assertParamExists)('publishFarcasterAction', 'farcasterActionReqBody', farcasterActionReqBody);
            const localVarPath = `/v2/farcaster/action/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication ApiKeyAuth required
            await (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "x-api-key", configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(farcasterActionReqBody, localVarRequestOptions, configuration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};
exports.ActionApiAxiosParamCreator = ActionApiAxiosParamCreator;
/**
 * ActionApi - functional programming interface
 * @export
 */
const ActionApiFp = function (configuration) {
    const localVarAxiosParamCreator = (0, exports.ActionApiAxiosParamCreator)(configuration);
    return {
        /**
         * Securely communicate and perform actions on behalf of users across different apps. It enables an app to send data or trigger actions in another app on behalf of a mutual user by signing messages using the user\'s Farcaster signer.
         * @summary User actions across apps
         * @param {FarcasterActionReqBody} farcasterActionReqBody
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         * @returns {Promise<{ [key: string]: any; }>} A promise that resolves to a `{ [key: string]: any; }` object
         *
         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/publish-farcaster-action)
         *
         */
        async publishFarcasterAction(farcasterActionReqBody, options) {
            var _a, _b, _c;
            const localVarAxiosArgs = await localVarAxiosParamCreator.publishFarcasterAction(farcasterActionReqBody, options);
            const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
            const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['ActionApi.publishFarcasterAction']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    };
};
exports.ActionApiFp = ActionApiFp;
/**
 * ActionApi - factory interface
 * @export
 */
const ActionApiFactory = function (configuration, basePath, axios) {
    const localVarFp = (0, exports.ActionApiFp)(configuration);
    return {
        /**
         * Securely communicate and perform actions on behalf of users across different apps. It enables an app to send data or trigger actions in another app on behalf of a mutual user by signing messages using the user\'s Farcaster signer.
         * @summary User actions across apps
         * @param {ActionApiPublishFarcasterActionRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         * @returns {Promise<{ [key: string]: any; }>} A promise that resolves to a `{ [key: string]: any; }` object
         *
         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/publish-farcaster-action)
         *
         */
        publishFarcasterAction(requestParameters, options) {
            return localVarFp.publishFarcasterAction(requestParameters.farcasterActionReqBody, options).then((request) => request(axios, basePath));
        },
    };
};
exports.ActionApiFactory = ActionApiFactory;
/**
 * ActionApi - object-oriented interface
 * @export
 * @class ActionApi
 * @extends {BaseAPI}
 */
class ActionApi extends base_1.BaseAPI {
    /**
     * Securely communicate and perform actions on behalf of users across different apps. It enables an app to send data or trigger actions in another app on behalf of a mutual user by signing messages using the user\'s Farcaster signer.
     * @summary User actions across apps
     * @param {ActionApiPublishFarcasterActionRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ActionApi
     * @returns {Promise<{ [key: string]: any; }>} A promise that resolves to a `{ [key: string]: any; }` object
     *
     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/publish-farcaster-action)
     *
     */
    publishFarcasterAction(requestParameters, options) {
        return (0, exports.ActionApiFp)(this.configuration).publishFarcasterAction(requestParameters.farcasterActionReqBody, options).then((request) => request(this.axios, this.basePath));
    }
}
exports.ActionApi = ActionApi;
