"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * Neynar API
 * The Neynar API allows you to interact with the Farcaster protocol among other things. See the [Neynar docs](https://docs.neynar.com/reference) for more details.
 *
 * The version of the OpenAPI document: 3.26.0
 * Contact: team@neynar.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.BanApi = exports.BanApiFactory = exports.BanApiFp = exports.BanApiAxiosParamCreator = void 0;
const axios_1 = __importDefault(require("axios"));
// Some imports not used depending on template conditions
// @ts-ignore
const common_1 = require("../common");
// @ts-ignore
const base_1 = require("../base");
/**
 * BanApi - axios parameter creator
 * @export
 */
const BanApiAxiosParamCreator = function (configuration) {
    return {
        /**
         * Deletes a list of FIDs from the app associated with your API key.
         * @summary Unban FIDs from app
         * @param {BanReqBody} banReqBody
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         * @returns {Promise<BanResponse>} A promise that resolves to a `BanResponse` object
         *
         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/delete-bans)
         *
         */
        deleteBans: async (banReqBody, options = {}) => {
            // verify required parameter 'banReqBody' is not null or undefined
            (0, common_1.assertParamExists)('deleteBans', 'banReqBody', banReqBody);
            const localVarPath = `/v2/farcaster/ban/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'DELETE' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication ApiKeyAuth required
            await (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "x-api-key", configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(banReqBody, localVarRequestOptions, configuration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Fetches all FIDs that your app has banned.
         * @summary Banned FIDs of app
         * @param {boolean} [xNeynarExperimental] Enables experimental features including filtering based on the Neynar score. See [docs](https://neynar.notion.site/Experimental-Features-1d2655195a8b80eb98b4d4ae7b76ae4a) for more details.
         * @param {number} [limit] Number of results to fetch  (Default: 20, Maximum: 100)
         * @param {string} [cursor] Pagination cursor.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         * @returns {Promise<BanListResponse>} A promise that resolves to a `BanListResponse` object
         *
         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-ban-list)
         *
         */
        fetchBanList: async (xNeynarExperimental, limit, cursor, options = {}) => {
            const localVarPath = `/v2/farcaster/ban/list/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication ApiKeyAuth required
            await (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "x-api-key", configuration);
            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }
            if (cursor !== undefined) {
                localVarQueryParameter['cursor'] = cursor;
            }
            if (xNeynarExperimental != null) {
                localVarHeaderParameter['x-neynar-experimental'] = typeof xNeynarExperimental === 'string'
                    ? xNeynarExperimental
                    : JSON.stringify(xNeynarExperimental);
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Bans a list of FIDs from the app associated with your API key. Banned users, their casts and reactions will not appear in feeds.
         * @summary Ban FIDs from app
         * @param {BanReqBody} banReqBody
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         * @returns {Promise<BanResponse>} A promise that resolves to a `BanResponse` object
         *
         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/publish-bans)
         *
         */
        publishBans: async (banReqBody, options = {}) => {
            // verify required parameter 'banReqBody' is not null or undefined
            (0, common_1.assertParamExists)('publishBans', 'banReqBody', banReqBody);
            const localVarPath = `/v2/farcaster/ban/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication ApiKeyAuth required
            await (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "x-api-key", configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(banReqBody, localVarRequestOptions, configuration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};
exports.BanApiAxiosParamCreator = BanApiAxiosParamCreator;
/**
 * BanApi - functional programming interface
 * @export
 */
const BanApiFp = function (configuration) {
    const localVarAxiosParamCreator = (0, exports.BanApiAxiosParamCreator)(configuration);
    return {
        /**
         * Deletes a list of FIDs from the app associated with your API key.
         * @summary Unban FIDs from app
         * @param {BanReqBody} banReqBody
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         * @returns {Promise<BanResponse>} A promise that resolves to a `BanResponse` object
         *
         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/delete-bans)
         *
         */
        async deleteBans(banReqBody, options) {
            var _a, _b, _c;
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteBans(banReqBody, options);
            const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
            const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['BanApi.deleteBans']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Fetches all FIDs that your app has banned.
         * @summary Banned FIDs of app
         * @param {boolean} [xNeynarExperimental] Enables experimental features including filtering based on the Neynar score. See [docs](https://neynar.notion.site/Experimental-Features-1d2655195a8b80eb98b4d4ae7b76ae4a) for more details.
         * @param {number} [limit] Number of results to fetch  (Default: 20, Maximum: 100)
         * @param {string} [cursor] Pagination cursor.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         * @returns {Promise<BanListResponse>} A promise that resolves to a `BanListResponse` object
         *
         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-ban-list)
         *
         */
        async fetchBanList(xNeynarExperimental, limit, cursor, options) {
            var _a, _b, _c;
            const localVarAxiosArgs = await localVarAxiosParamCreator.fetchBanList(xNeynarExperimental, limit, cursor, options);
            const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
            const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['BanApi.fetchBanList']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Bans a list of FIDs from the app associated with your API key. Banned users, their casts and reactions will not appear in feeds.
         * @summary Ban FIDs from app
         * @param {BanReqBody} banReqBody
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         * @returns {Promise<BanResponse>} A promise that resolves to a `BanResponse` object
         *
         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/publish-bans)
         *
         */
        async publishBans(banReqBody, options) {
            var _a, _b, _c;
            const localVarAxiosArgs = await localVarAxiosParamCreator.publishBans(banReqBody, options);
            const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
            const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['BanApi.publishBans']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    };
};
exports.BanApiFp = BanApiFp;
/**
 * BanApi - factory interface
 * @export
 */
const BanApiFactory = function (configuration, basePath, axios) {
    const localVarFp = (0, exports.BanApiFp)(configuration);
    return {
        /**
         * Deletes a list of FIDs from the app associated with your API key.
         * @summary Unban FIDs from app
         * @param {BanApiDeleteBansRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         * @returns {Promise<BanResponse>} A promise that resolves to a `BanResponse` object
         *
         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/delete-bans)
         *
         */
        deleteBans(requestParameters, options) {
            return localVarFp.deleteBans(requestParameters.banReqBody, options).then((request) => request(axios, basePath));
        },
        /**
         * Fetches all FIDs that your app has banned.
         * @summary Banned FIDs of app
         * @param {BanApiFetchBanListRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         * @returns {Promise<BanListResponse>} A promise that resolves to a `BanListResponse` object
         *
         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-ban-list)
         *
         */
        fetchBanList(requestParameters = {}, options) {
            return localVarFp.fetchBanList(requestParameters.xNeynarExperimental, requestParameters.limit, requestParameters.cursor, options).then((request) => request(axios, basePath));
        },
        /**
         * Bans a list of FIDs from the app associated with your API key. Banned users, their casts and reactions will not appear in feeds.
         * @summary Ban FIDs from app
         * @param {BanApiPublishBansRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         * @returns {Promise<BanResponse>} A promise that resolves to a `BanResponse` object
         *
         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/publish-bans)
         *
         */
        publishBans(requestParameters, options) {
            return localVarFp.publishBans(requestParameters.banReqBody, options).then((request) => request(axios, basePath));
        },
    };
};
exports.BanApiFactory = BanApiFactory;
/**
 * BanApi - object-oriented interface
 * @export
 * @class BanApi
 * @extends {BaseAPI}
 */
class BanApi extends base_1.BaseAPI {
    /**
     * Deletes a list of FIDs from the app associated with your API key.
     * @summary Unban FIDs from app
     * @param {BanApiDeleteBansRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BanApi
     * @returns {Promise<BanResponse>} A promise that resolves to a `BanResponse` object
     *
     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/delete-bans)
     *
     */
    deleteBans(requestParameters, options) {
        return (0, exports.BanApiFp)(this.configuration).deleteBans(requestParameters.banReqBody, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Fetches all FIDs that your app has banned.
     * @summary Banned FIDs of app
     * @param {BanApiFetchBanListRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BanApi
     * @returns {Promise<BanListResponse>} A promise that resolves to a `BanListResponse` object
     *
     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-ban-list)
     *
     */
    fetchBanList(requestParameters = {}, options) {
        return (0, exports.BanApiFp)(this.configuration).fetchBanList(requestParameters.xNeynarExperimental, requestParameters.limit, requestParameters.cursor, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Bans a list of FIDs from the app associated with your API key. Banned users, their casts and reactions will not appear in feeds.
     * @summary Ban FIDs from app
     * @param {BanApiPublishBansRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BanApi
     * @returns {Promise<BanResponse>} A promise that resolves to a `BanResponse` object
     *
     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/publish-bans)
     *
     */
    publishBans(requestParameters, options) {
        return (0, exports.BanApiFp)(this.configuration).publishBans(requestParameters.banReqBody, options).then((request) => request(this.axios, this.basePath));
    }
}
exports.BanApi = BanApi;
