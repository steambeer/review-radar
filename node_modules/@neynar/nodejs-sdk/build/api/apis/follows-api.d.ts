/**
 * Neynar API
 * The Neynar API allows you to interact with the Farcaster protocol among other things. See the [Neynar docs](https://docs.neynar.com/reference) for more details.
 *
 * The version of the OpenAPI document: 3.26.0
 * Contact: team@neynar.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import { type RequestArgs, BaseAPI } from '../base';
import type { FollowersResponse } from '../models';
import type { RelevantFollowersResponse } from '../models';
import type { UsersResponse } from '../models';
/**
 * FollowsApi - axios parameter creator
 * @export
 */
export declare const FollowsApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * Fetch a list of suggested users to follow. Used to help users discover new users to follow
     * @summary Suggest Follows
     * @param {number | null} fid FID of the user whose following you want to fetch.
     * @param {boolean} [xNeynarExperimental] Enables experimental features including filtering based on the Neynar score. See [docs](https://neynar.notion.site/Experimental-Features-1d2655195a8b80eb98b4d4ae7b76ae4a) for more details.
     * @param {number | null} [viewerFid] Providing this will return a list of users that respects this user\&#39;s mutes and blocks and includes &#x60;viewer_context&#x60;.
     * @param {number} [limit] Number of results to fetch  (Default: 25, Maximum: 100)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @returns {Promise<UsersResponse>} A promise that resolves to a `UsersResponse` object
     *
     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-follow-suggestions)
     *
     */
    fetchFollowSuggestions: (fid: number | null, xNeynarExperimental?: boolean, viewerFid?: number | null, limit?: number, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Returns a list of relevant followers for a specific FID. This usually shows on a profile as \"X, Y and Z follow this user\".
     * @summary Relevant followers
     * @param {number} targetFid User who\&#39;s profile you are looking at
     * @param {number} viewerFid The FID of the user to customize this response for. Providing this will also return a list of followers that respects this user\&#39;s mutes and blocks and includes &#x60;viewer_context&#x60;.
     * @param {boolean} [xNeynarExperimental] Enables experimental features including filtering based on the Neynar score. See [docs](https://neynar.notion.site/Experimental-Features-1d2655195a8b80eb98b4d4ae7b76ae4a) for more details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @returns {Promise<RelevantFollowersResponse>} A promise that resolves to a `RelevantFollowersResponse` object
     *
     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-relevant-followers)
     *
     */
    fetchRelevantFollowers: (targetFid: number, viewerFid: number, xNeynarExperimental?: boolean, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Returns a list of followers for a specific FID.
     * @summary Followers
     * @param {number} fid User who\&#39;s profile you are looking at
     * @param {boolean} [xNeynarExperimental] Enables experimental features including filtering based on the Neynar score. See [docs](https://neynar.notion.site/Experimental-Features-1d2655195a8b80eb98b4d4ae7b76ae4a) for more details.
     * @param {number} [viewerFid] Providing this will return a list of followers that respects this user\&#39;s mutes and blocks and includes &#x60;viewer_context&#x60;.
     * @param {FetchUserFollowersSortTypeEnum} [sortType] Sort type for fetch followers. Default is &#x60;desc_chron&#x60;
     * @param {number} [limit] Number of results to fetch  (Default: 20, Maximum: 100)
     * @param {string} [cursor] Pagination cursor.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @returns {Promise<FollowersResponse>} A promise that resolves to a `FollowersResponse` object
     *
     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-user-followers)
     *
     */
    fetchUserFollowers: (fid: number, xNeynarExperimental?: boolean, viewerFid?: number, sortType?: FetchUserFollowersSortTypeEnum, limit?: number, cursor?: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Fetch a list of users who a given user is following. Can optionally include a viewer_fid and sort_type.
     * @summary Following
     * @param {number} fid FID of the user whose following you want to fetch.
     * @param {boolean} [xNeynarExperimental] Enables experimental features including filtering based on the Neynar score. See [docs](https://neynar.notion.site/Experimental-Features-1d2655195a8b80eb98b4d4ae7b76ae4a) for more details.
     * @param {number} [viewerFid] Providing this will return a list of users that respects this user\&#39;s mutes and blocks and includes &#x60;viewer_context&#x60;.
     * @param {FetchUserFollowingSortTypeEnum} [sortType] Optional parameter to sort the users based on different criteria.
     * @param {number} [limit] Number of results to fetch  (Default: 25, Maximum: 100)
     * @param {string} [cursor] Pagination cursor.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @returns {Promise<FollowersResponse>} A promise that resolves to a `FollowersResponse` object
     *
     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-user-following)
     *
     */
    fetchUserFollowing: (fid: number, xNeynarExperimental?: boolean, viewerFid?: number, sortType?: FetchUserFollowingSortTypeEnum, limit?: number, cursor?: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * FollowsApi - functional programming interface
 * @export
 */
export declare const FollowsApiFp: (configuration?: Configuration) => {
    /**
     * Fetch a list of suggested users to follow. Used to help users discover new users to follow
     * @summary Suggest Follows
     * @param {number | null} fid FID of the user whose following you want to fetch.
     * @param {boolean} [xNeynarExperimental] Enables experimental features including filtering based on the Neynar score. See [docs](https://neynar.notion.site/Experimental-Features-1d2655195a8b80eb98b4d4ae7b76ae4a) for more details.
     * @param {number | null} [viewerFid] Providing this will return a list of users that respects this user\&#39;s mutes and blocks and includes &#x60;viewer_context&#x60;.
     * @param {number} [limit] Number of results to fetch  (Default: 25, Maximum: 100)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @returns {Promise<UsersResponse>} A promise that resolves to a `UsersResponse` object
     *
     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-follow-suggestions)
     *
     */
    fetchFollowSuggestions(fid: number | null, xNeynarExperimental?: boolean, viewerFid?: number | null, limit?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UsersResponse>>;
    /**
     * Returns a list of relevant followers for a specific FID. This usually shows on a profile as \"X, Y and Z follow this user\".
     * @summary Relevant followers
     * @param {number} targetFid User who\&#39;s profile you are looking at
     * @param {number} viewerFid The FID of the user to customize this response for. Providing this will also return a list of followers that respects this user\&#39;s mutes and blocks and includes &#x60;viewer_context&#x60;.
     * @param {boolean} [xNeynarExperimental] Enables experimental features including filtering based on the Neynar score. See [docs](https://neynar.notion.site/Experimental-Features-1d2655195a8b80eb98b4d4ae7b76ae4a) for more details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @returns {Promise<RelevantFollowersResponse>} A promise that resolves to a `RelevantFollowersResponse` object
     *
     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-relevant-followers)
     *
     */
    fetchRelevantFollowers(targetFid: number, viewerFid: number, xNeynarExperimental?: boolean, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RelevantFollowersResponse>>;
    /**
     * Returns a list of followers for a specific FID.
     * @summary Followers
     * @param {number} fid User who\&#39;s profile you are looking at
     * @param {boolean} [xNeynarExperimental] Enables experimental features including filtering based on the Neynar score. See [docs](https://neynar.notion.site/Experimental-Features-1d2655195a8b80eb98b4d4ae7b76ae4a) for more details.
     * @param {number} [viewerFid] Providing this will return a list of followers that respects this user\&#39;s mutes and blocks and includes &#x60;viewer_context&#x60;.
     * @param {FetchUserFollowersSortTypeEnum} [sortType] Sort type for fetch followers. Default is &#x60;desc_chron&#x60;
     * @param {number} [limit] Number of results to fetch  (Default: 20, Maximum: 100)
     * @param {string} [cursor] Pagination cursor.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @returns {Promise<FollowersResponse>} A promise that resolves to a `FollowersResponse` object
     *
     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-user-followers)
     *
     */
    fetchUserFollowers(fid: number, xNeynarExperimental?: boolean, viewerFid?: number, sortType?: FetchUserFollowersSortTypeEnum, limit?: number, cursor?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FollowersResponse>>;
    /**
     * Fetch a list of users who a given user is following. Can optionally include a viewer_fid and sort_type.
     * @summary Following
     * @param {number} fid FID of the user whose following you want to fetch.
     * @param {boolean} [xNeynarExperimental] Enables experimental features including filtering based on the Neynar score. See [docs](https://neynar.notion.site/Experimental-Features-1d2655195a8b80eb98b4d4ae7b76ae4a) for more details.
     * @param {number} [viewerFid] Providing this will return a list of users that respects this user\&#39;s mutes and blocks and includes &#x60;viewer_context&#x60;.
     * @param {FetchUserFollowingSortTypeEnum} [sortType] Optional parameter to sort the users based on different criteria.
     * @param {number} [limit] Number of results to fetch  (Default: 25, Maximum: 100)
     * @param {string} [cursor] Pagination cursor.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @returns {Promise<FollowersResponse>} A promise that resolves to a `FollowersResponse` object
     *
     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-user-following)
     *
     */
    fetchUserFollowing(fid: number, xNeynarExperimental?: boolean, viewerFid?: number, sortType?: FetchUserFollowingSortTypeEnum, limit?: number, cursor?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FollowersResponse>>;
};
/**
 * FollowsApi - factory interface
 * @export
 */
export declare const FollowsApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * Fetch a list of suggested users to follow. Used to help users discover new users to follow
     * @summary Suggest Follows
     * @param {FollowsApiFetchFollowSuggestionsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @returns {Promise<UsersResponse>} A promise that resolves to a `UsersResponse` object
     *
     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-follow-suggestions)
     *
     */
    fetchFollowSuggestions(requestParameters: FollowsApiFetchFollowSuggestionsRequest, options?: RawAxiosRequestConfig): AxiosPromise<UsersResponse>;
    /**
     * Returns a list of relevant followers for a specific FID. This usually shows on a profile as \"X, Y and Z follow this user\".
     * @summary Relevant followers
     * @param {FollowsApiFetchRelevantFollowersRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @returns {Promise<RelevantFollowersResponse>} A promise that resolves to a `RelevantFollowersResponse` object
     *
     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-relevant-followers)
     *
     */
    fetchRelevantFollowers(requestParameters: FollowsApiFetchRelevantFollowersRequest, options?: RawAxiosRequestConfig): AxiosPromise<RelevantFollowersResponse>;
    /**
     * Returns a list of followers for a specific FID.
     * @summary Followers
     * @param {FollowsApiFetchUserFollowersRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @returns {Promise<FollowersResponse>} A promise that resolves to a `FollowersResponse` object
     *
     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-user-followers)
     *
     */
    fetchUserFollowers(requestParameters: FollowsApiFetchUserFollowersRequest, options?: RawAxiosRequestConfig): AxiosPromise<FollowersResponse>;
    /**
     * Fetch a list of users who a given user is following. Can optionally include a viewer_fid and sort_type.
     * @summary Following
     * @param {FollowsApiFetchUserFollowingRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @returns {Promise<FollowersResponse>} A promise that resolves to a `FollowersResponse` object
     *
     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-user-following)
     *
     */
    fetchUserFollowing(requestParameters: FollowsApiFetchUserFollowingRequest, options?: RawAxiosRequestConfig): AxiosPromise<FollowersResponse>;
};
/**
 * FollowsApi - interface
 * @export
 * @interface FollowsApi
 */
export interface FollowsApiInterface {
    /**
     * Fetch a list of suggested users to follow. Used to help users discover new users to follow
     * @summary Suggest Follows
     * @param {FollowsApiFetchFollowSuggestionsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FollowsApiInterface
     * @returns {Promise<UsersResponse>} A promise that resolves to a `UsersResponse` object
     *
     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-follow-suggestions)
     *
     */
    fetchFollowSuggestions(requestParameters: FollowsApiFetchFollowSuggestionsRequest, options?: RawAxiosRequestConfig): AxiosPromise<UsersResponse>;
    /**
     * Returns a list of relevant followers for a specific FID. This usually shows on a profile as \"X, Y and Z follow this user\".
     * @summary Relevant followers
     * @param {FollowsApiFetchRelevantFollowersRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FollowsApiInterface
     * @returns {Promise<RelevantFollowersResponse>} A promise that resolves to a `RelevantFollowersResponse` object
     *
     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-relevant-followers)
     *
     */
    fetchRelevantFollowers(requestParameters: FollowsApiFetchRelevantFollowersRequest, options?: RawAxiosRequestConfig): AxiosPromise<RelevantFollowersResponse>;
    /**
     * Returns a list of followers for a specific FID.
     * @summary Followers
     * @param {FollowsApiFetchUserFollowersRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FollowsApiInterface
     * @returns {Promise<FollowersResponse>} A promise that resolves to a `FollowersResponse` object
     *
     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-user-followers)
     *
     */
    fetchUserFollowers(requestParameters: FollowsApiFetchUserFollowersRequest, options?: RawAxiosRequestConfig): AxiosPromise<FollowersResponse>;
    /**
     * Fetch a list of users who a given user is following. Can optionally include a viewer_fid and sort_type.
     * @summary Following
     * @param {FollowsApiFetchUserFollowingRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FollowsApiInterface
     * @returns {Promise<FollowersResponse>} A promise that resolves to a `FollowersResponse` object
     *
     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-user-following)
     *
     */
    fetchUserFollowing(requestParameters: FollowsApiFetchUserFollowingRequest, options?: RawAxiosRequestConfig): AxiosPromise<FollowersResponse>;
}
/**
 * Request parameters for fetchFollowSuggestions operation in FollowsApi.
 * @export
 * @interface FollowsApiFetchFollowSuggestionsRequest
 */
export interface FollowsApiFetchFollowSuggestionsRequest {
    /**
     * FID of the user whose following you want to fetch.
     *
     *
     *
     * @type {number}
     * @memberof FollowsApiFetchFollowSuggestions
     */
    readonly fid: number | null;
    /**
     * Enables experimental features including filtering based on the Neynar score. See [docs](https://neynar.notion.site/Experimental-Features-1d2655195a8b80eb98b4d4ae7b76ae4a) for more details.
     *
     *
     * @globalHeader
     * @type {boolean}
     * @memberof FollowsApiFetchFollowSuggestions
     */
    readonly xNeynarExperimental?: boolean;
    /**
     * Providing this will return a list of users that respects this user\&#39;s mutes and blocks and includes &#x60;viewer_context&#x60;.
     *
     *
     *
     * @type {number}
     * @memberof FollowsApiFetchFollowSuggestions
     */
    readonly viewerFid?: number | null;
    /**
     * Number of results to fetch (Default: 25, Maximum: 100)
     *
     *
     *
     * @type {number}
     * @memberof FollowsApiFetchFollowSuggestions
     */
    readonly limit?: number;
}
/**
 * Request parameters for fetchRelevantFollowers operation in FollowsApi.
 * @export
 * @interface FollowsApiFetchRelevantFollowersRequest
 */
export interface FollowsApiFetchRelevantFollowersRequest {
    /**
     * User who\&#39;s profile you are looking at
     *
     *
     *
     * @type {number}
     * @memberof FollowsApiFetchRelevantFollowers
     */
    readonly targetFid: number;
    /**
     * The FID of the user to customize this response for. Providing this will also return a list of followers that respects this user\&#39;s mutes and blocks and includes &#x60;viewer_context&#x60;.
     *
     *
     *
     * @type {number}
     * @memberof FollowsApiFetchRelevantFollowers
     */
    readonly viewerFid: number;
    /**
     * Enables experimental features including filtering based on the Neynar score. See [docs](https://neynar.notion.site/Experimental-Features-1d2655195a8b80eb98b4d4ae7b76ae4a) for more details.
     *
     *
     * @globalHeader
     * @type {boolean}
     * @memberof FollowsApiFetchRelevantFollowers
     */
    readonly xNeynarExperimental?: boolean;
}
/**
 * Request parameters for fetchUserFollowers operation in FollowsApi.
 * @export
 * @interface FollowsApiFetchUserFollowersRequest
 */
export interface FollowsApiFetchUserFollowersRequest {
    /**
     * User who\&#39;s profile you are looking at
     *
     *
     *
     * @type {number}
     * @memberof FollowsApiFetchUserFollowers
     */
    readonly fid: number;
    /**
     * Enables experimental features including filtering based on the Neynar score. See [docs](https://neynar.notion.site/Experimental-Features-1d2655195a8b80eb98b4d4ae7b76ae4a) for more details.
     *
     *
     * @globalHeader
     * @type {boolean}
     * @memberof FollowsApiFetchUserFollowers
     */
    readonly xNeynarExperimental?: boolean;
    /**
     * Providing this will return a list of followers that respects this user\&#39;s mutes and blocks and includes &#x60;viewer_context&#x60;.
     *
     *
     *
     * @type {number}
     * @memberof FollowsApiFetchUserFollowers
     */
    readonly viewerFid?: number;
    /**
     * Sort type for fetch followers. Default is &#x60;desc_chron&#x60;
     *
     *
     *
     * @type {'desc_chron' | 'algorithmic'}
     * @memberof FollowsApiFetchUserFollowers
     */
    readonly sortType?: FetchUserFollowersSortTypeEnum;
    /**
     * Number of results to fetch (Default: 20, Maximum: 100)
     *
     *
     *
     * @type {number}
     * @memberof FollowsApiFetchUserFollowers
     */
    readonly limit?: number;
    /**
     * Pagination cursor.
     *
     *
     *
     * @type {string}
     * @memberof FollowsApiFetchUserFollowers
     */
    readonly cursor?: string;
}
/**
 * Request parameters for fetchUserFollowing operation in FollowsApi.
 * @export
 * @interface FollowsApiFetchUserFollowingRequest
 */
export interface FollowsApiFetchUserFollowingRequest {
    /**
     * FID of the user whose following you want to fetch.
     *
     *
     *
     * @type {number}
     * @memberof FollowsApiFetchUserFollowing
     */
    readonly fid: number;
    /**
     * Enables experimental features including filtering based on the Neynar score. See [docs](https://neynar.notion.site/Experimental-Features-1d2655195a8b80eb98b4d4ae7b76ae4a) for more details.
     *
     *
     * @globalHeader
     * @type {boolean}
     * @memberof FollowsApiFetchUserFollowing
     */
    readonly xNeynarExperimental?: boolean;
    /**
     * Providing this will return a list of users that respects this user\&#39;s mutes and blocks and includes &#x60;viewer_context&#x60;.
     *
     *
     *
     * @type {number}
     * @memberof FollowsApiFetchUserFollowing
     */
    readonly viewerFid?: number;
    /**
     * Optional parameter to sort the users based on different criteria.
     *
     *
     *
     * @type {'desc_chron' | 'algorithmic'}
     * @memberof FollowsApiFetchUserFollowing
     */
    readonly sortType?: FetchUserFollowingSortTypeEnum;
    /**
     * Number of results to fetch (Default: 25, Maximum: 100)
     *
     *
     *
     * @type {number}
     * @memberof FollowsApiFetchUserFollowing
     */
    readonly limit?: number;
    /**
     * Pagination cursor.
     *
     *
     *
     * @type {string}
     * @memberof FollowsApiFetchUserFollowing
     */
    readonly cursor?: string;
}
/**
 * FollowsApi - object-oriented interface
 * @export
 * @class FollowsApi
 * @extends {BaseAPI}
 */
export declare class FollowsApi extends BaseAPI implements FollowsApiInterface {
    /**
     * Fetch a list of suggested users to follow. Used to help users discover new users to follow
     * @summary Suggest Follows
     * @param {FollowsApiFetchFollowSuggestionsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FollowsApi
     * @returns {Promise<UsersResponse>} A promise that resolves to a `UsersResponse` object
     *
     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-follow-suggestions)
     *
     */
    fetchFollowSuggestions(requestParameters: FollowsApiFetchFollowSuggestionsRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<UsersResponse, any>>;
    /**
     * Returns a list of relevant followers for a specific FID. This usually shows on a profile as \"X, Y and Z follow this user\".
     * @summary Relevant followers
     * @param {FollowsApiFetchRelevantFollowersRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FollowsApi
     * @returns {Promise<RelevantFollowersResponse>} A promise that resolves to a `RelevantFollowersResponse` object
     *
     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-relevant-followers)
     *
     */
    fetchRelevantFollowers(requestParameters: FollowsApiFetchRelevantFollowersRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<RelevantFollowersResponse, any>>;
    /**
     * Returns a list of followers for a specific FID.
     * @summary Followers
     * @param {FollowsApiFetchUserFollowersRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FollowsApi
     * @returns {Promise<FollowersResponse>} A promise that resolves to a `FollowersResponse` object
     *
     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-user-followers)
     *
     */
    fetchUserFollowers(requestParameters: FollowsApiFetchUserFollowersRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<FollowersResponse, any>>;
    /**
     * Fetch a list of users who a given user is following. Can optionally include a viewer_fid and sort_type.
     * @summary Following
     * @param {FollowsApiFetchUserFollowingRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FollowsApi
     * @returns {Promise<FollowersResponse>} A promise that resolves to a `FollowersResponse` object
     *
     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-user-following)
     *
     */
    fetchUserFollowing(requestParameters: FollowsApiFetchUserFollowingRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<FollowersResponse, any>>;
}
/**
 * @export
 */
export declare const FetchUserFollowersSortTypeEnum: {
    readonly DescChron: "desc_chron";
    readonly Algorithmic: "algorithmic";
};
export type FetchUserFollowersSortTypeEnum = typeof FetchUserFollowersSortTypeEnum[keyof typeof FetchUserFollowersSortTypeEnum];
/**
 * @export
 */
export declare const FetchUserFollowingSortTypeEnum: {
    readonly DescChron: "desc_chron";
    readonly Algorithmic: "algorithmic";
};
export type FetchUserFollowingSortTypeEnum = typeof FetchUserFollowingSortTypeEnum[keyof typeof FetchUserFollowingSortTypeEnum];
