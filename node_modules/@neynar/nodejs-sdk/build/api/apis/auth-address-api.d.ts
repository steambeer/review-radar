/**
 * Neynar API
 * The Neynar API allows you to interact with the Farcaster protocol among other things. See the [Neynar docs](https://docs.neynar.com/reference) for more details.
 *
 * The version of the OpenAPI document: 3.26.0
 * Contact: team@neynar.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import { type RequestArgs, BaseAPI } from '../base';
import type { RegisterAuthAddressDeveloperManagedSignedKeyReqBody } from '../models';
import type { RegisterSignedKeyForDeveloperManagedAuthAddress200Response } from '../models';
/**
 * AuthAddressApi - axios parameter creator
 * @export
 */
export declare const AuthAddressApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * Fetches the status of a developer managed auth address by auth address
     * @summary Status by auth address
     * @param {string} address Ethereum address
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @returns {Promise<RegisterSignedKeyForDeveloperManagedAuthAddress200Response>} A promise that resolves to a `RegisterSignedKeyForDeveloperManagedAuthAddress200Response` object
     *
     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/lookup-developer-managed-auth-address)
     *
     */
    lookupDeveloperManagedAuthAddress: (address: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Allow apps to register an Ethereum addresses as authorized \"auth addresses\" for a user\'s Farcaster account, enabling seamless Sign-In With Farcaster (SIWF) across applications without repeated custody wallet authorizations.
     * @summary Register Signed Key
     * @param {RegisterAuthAddressDeveloperManagedSignedKeyReqBody} registerAuthAddressDeveloperManagedSignedKeyReqBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @returns {Promise<RegisterSignedKeyForDeveloperManagedAuthAddress200Response>} A promise that resolves to a `RegisterSignedKeyForDeveloperManagedAuthAddress200Response` object
     *
     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/register-signed-key-for-developer-managed-auth-address)
     *
     */
    registerSignedKeyForDeveloperManagedAuthAddress: (registerAuthAddressDeveloperManagedSignedKeyReqBody: RegisterAuthAddressDeveloperManagedSignedKeyReqBody, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * AuthAddressApi - functional programming interface
 * @export
 */
export declare const AuthAddressApiFp: (configuration?: Configuration) => {
    /**
     * Fetches the status of a developer managed auth address by auth address
     * @summary Status by auth address
     * @param {string} address Ethereum address
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @returns {Promise<RegisterSignedKeyForDeveloperManagedAuthAddress200Response>} A promise that resolves to a `RegisterSignedKeyForDeveloperManagedAuthAddress200Response` object
     *
     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/lookup-developer-managed-auth-address)
     *
     */
    lookupDeveloperManagedAuthAddress(address: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RegisterSignedKeyForDeveloperManagedAuthAddress200Response>>;
    /**
     * Allow apps to register an Ethereum addresses as authorized \"auth addresses\" for a user\'s Farcaster account, enabling seamless Sign-In With Farcaster (SIWF) across applications without repeated custody wallet authorizations.
     * @summary Register Signed Key
     * @param {RegisterAuthAddressDeveloperManagedSignedKeyReqBody} registerAuthAddressDeveloperManagedSignedKeyReqBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @returns {Promise<RegisterSignedKeyForDeveloperManagedAuthAddress200Response>} A promise that resolves to a `RegisterSignedKeyForDeveloperManagedAuthAddress200Response` object
     *
     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/register-signed-key-for-developer-managed-auth-address)
     *
     */
    registerSignedKeyForDeveloperManagedAuthAddress(registerAuthAddressDeveloperManagedSignedKeyReqBody: RegisterAuthAddressDeveloperManagedSignedKeyReqBody, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RegisterSignedKeyForDeveloperManagedAuthAddress200Response>>;
};
/**
 * AuthAddressApi - factory interface
 * @export
 */
export declare const AuthAddressApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * Fetches the status of a developer managed auth address by auth address
     * @summary Status by auth address
     * @param {AuthAddressApiLookupDeveloperManagedAuthAddressRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @returns {Promise<RegisterSignedKeyForDeveloperManagedAuthAddress200Response>} A promise that resolves to a `RegisterSignedKeyForDeveloperManagedAuthAddress200Response` object
     *
     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/lookup-developer-managed-auth-address)
     *
     */
    lookupDeveloperManagedAuthAddress(requestParameters: AuthAddressApiLookupDeveloperManagedAuthAddressRequest, options?: RawAxiosRequestConfig): AxiosPromise<RegisterSignedKeyForDeveloperManagedAuthAddress200Response>;
    /**
     * Allow apps to register an Ethereum addresses as authorized \"auth addresses\" for a user\'s Farcaster account, enabling seamless Sign-In With Farcaster (SIWF) across applications without repeated custody wallet authorizations.
     * @summary Register Signed Key
     * @param {AuthAddressApiRegisterSignedKeyForDeveloperManagedAuthAddressRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @returns {Promise<RegisterSignedKeyForDeveloperManagedAuthAddress200Response>} A promise that resolves to a `RegisterSignedKeyForDeveloperManagedAuthAddress200Response` object
     *
     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/register-signed-key-for-developer-managed-auth-address)
     *
     */
    registerSignedKeyForDeveloperManagedAuthAddress(requestParameters: AuthAddressApiRegisterSignedKeyForDeveloperManagedAuthAddressRequest, options?: RawAxiosRequestConfig): AxiosPromise<RegisterSignedKeyForDeveloperManagedAuthAddress200Response>;
};
/**
 * AuthAddressApi - interface
 * @export
 * @interface AuthAddressApi
 */
export interface AuthAddressApiInterface {
    /**
     * Fetches the status of a developer managed auth address by auth address
     * @summary Status by auth address
     * @param {AuthAddressApiLookupDeveloperManagedAuthAddressRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthAddressApiInterface
     * @returns {Promise<RegisterSignedKeyForDeveloperManagedAuthAddress200Response>} A promise that resolves to a `RegisterSignedKeyForDeveloperManagedAuthAddress200Response` object
     *
     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/lookup-developer-managed-auth-address)
     *
     */
    lookupDeveloperManagedAuthAddress(requestParameters: AuthAddressApiLookupDeveloperManagedAuthAddressRequest, options?: RawAxiosRequestConfig): AxiosPromise<RegisterSignedKeyForDeveloperManagedAuthAddress200Response>;
    /**
     * Allow apps to register an Ethereum addresses as authorized \"auth addresses\" for a user\'s Farcaster account, enabling seamless Sign-In With Farcaster (SIWF) across applications without repeated custody wallet authorizations.
     * @summary Register Signed Key
     * @param {AuthAddressApiRegisterSignedKeyForDeveloperManagedAuthAddressRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthAddressApiInterface
     * @returns {Promise<RegisterSignedKeyForDeveloperManagedAuthAddress200Response>} A promise that resolves to a `RegisterSignedKeyForDeveloperManagedAuthAddress200Response` object
     *
     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/register-signed-key-for-developer-managed-auth-address)
     *
     */
    registerSignedKeyForDeveloperManagedAuthAddress(requestParameters: AuthAddressApiRegisterSignedKeyForDeveloperManagedAuthAddressRequest, options?: RawAxiosRequestConfig): AxiosPromise<RegisterSignedKeyForDeveloperManagedAuthAddress200Response>;
}
/**
 * Request parameters for lookupDeveloperManagedAuthAddress operation in AuthAddressApi.
 * @export
 * @interface AuthAddressApiLookupDeveloperManagedAuthAddressRequest
 */
export interface AuthAddressApiLookupDeveloperManagedAuthAddressRequest {
    /**
     * Ethereum address
     *
     *
     *
     * @type {string}
     * @memberof AuthAddressApiLookupDeveloperManagedAuthAddress
     */
    readonly address: string;
}
/**
 * Request parameters for registerSignedKeyForDeveloperManagedAuthAddress operation in AuthAddressApi.
 * @export
 * @interface AuthAddressApiRegisterSignedKeyForDeveloperManagedAuthAddressRequest
 */
export interface AuthAddressApiRegisterSignedKeyForDeveloperManagedAuthAddressRequest {
    /**
     *
     *
     *
     *
     * @type {RegisterAuthAddressDeveloperManagedSignedKeyReqBody}
     * @memberof AuthAddressApiRegisterSignedKeyForDeveloperManagedAuthAddress
     */
    readonly registerAuthAddressDeveloperManagedSignedKeyReqBody: RegisterAuthAddressDeveloperManagedSignedKeyReqBody;
}
/**
 * AuthAddressApi - object-oriented interface
 * @export
 * @class AuthAddressApi
 * @extends {BaseAPI}
 */
export declare class AuthAddressApi extends BaseAPI implements AuthAddressApiInterface {
    /**
     * Fetches the status of a developer managed auth address by auth address
     * @summary Status by auth address
     * @param {AuthAddressApiLookupDeveloperManagedAuthAddressRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthAddressApi
     * @returns {Promise<RegisterSignedKeyForDeveloperManagedAuthAddress200Response>} A promise that resolves to a `RegisterSignedKeyForDeveloperManagedAuthAddress200Response` object
     *
     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/lookup-developer-managed-auth-address)
     *
     */
    lookupDeveloperManagedAuthAddress(requestParameters: AuthAddressApiLookupDeveloperManagedAuthAddressRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<RegisterSignedKeyForDeveloperManagedAuthAddress200Response, any>>;
    /**
     * Allow apps to register an Ethereum addresses as authorized \"auth addresses\" for a user\'s Farcaster account, enabling seamless Sign-In With Farcaster (SIWF) across applications without repeated custody wallet authorizations.
     * @summary Register Signed Key
     * @param {AuthAddressApiRegisterSignedKeyForDeveloperManagedAuthAddressRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthAddressApi
     * @returns {Promise<RegisterSignedKeyForDeveloperManagedAuthAddress200Response>} A promise that resolves to a `RegisterSignedKeyForDeveloperManagedAuthAddress200Response` object
     *
     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/register-signed-key-for-developer-managed-auth-address)
     *
     */
    registerSignedKeyForDeveloperManagedAuthAddress(requestParameters: AuthAddressApiRegisterSignedKeyForDeveloperManagedAuthAddressRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<RegisterSignedKeyForDeveloperManagedAuthAddress200Response, any>>;
}
